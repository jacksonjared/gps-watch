
gps-watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003478  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001814  08003584  08003584  00013584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d98  08004d98  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004d98  08004d98  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d98  08004d98  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004da0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000070  08004e10  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  08004e10  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019736  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005d06  00000000  00000000  000397cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0003f4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a98  00000000  00000000  000402f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183db  00000000  00000000  00040d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc87  00000000  00000000  00059163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089adf  00000000  00000000  00065dea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000003c  00000000  00000000  000ef8c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029ac  00000000  00000000  000ef908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000f22b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000205b  00000000  00000000  000f230f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	0800356c 	.word	0x0800356c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	0800356c 	.word	0x0800356c

0800014c <oled_whisperer>:
                                0xA6,       // Non-inverted displayed
                                0xAF};      // Display on

uint8_t displayBuf[7][128];

void oled_whisperer(SPI_HandleTypeDef* hspi, uint8_t* data, uint16_t data_length, uint8_t isDATA) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	4611      	mov	r1, r2
 8000158:	461a      	mov	r2, r3
 800015a:	460b      	mov	r3, r1
 800015c:	80fb      	strh	r3, [r7, #6]
 800015e:	4613      	mov	r3, r2
 8000160:	717b      	strb	r3, [r7, #5]

  /// Pull CS pin low
  HAL_GPIO_WritePin(n_oled_cs_GPIO_Port, n_oled_cs_Pin, GPIO_PIN_RESET);
 8000162:	2200      	movs	r2, #0
 8000164:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000168:	4810      	ldr	r0, [pc, #64]	; (80001ac <oled_whisperer+0x60>)
 800016a:	f001 fa35 	bl	80015d8 <HAL_GPIO_WritePin>

  /// Pull D/C pin high if sent byte is data, low if command
  HAL_GPIO_WritePin(n_oled_dc_GPIO_Port, n_oled_dc_Pin, isDATA);
 800016e:	797b      	ldrb	r3, [r7, #5]
 8000170:	461a      	mov	r2, r3
 8000172:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000176:	480e      	ldr	r0, [pc, #56]	; (80001b0 <oled_whisperer+0x64>)
 8000178:	f001 fa2e 	bl	80015d8 <HAL_GPIO_WritePin>

  /// Transmit entire passed data buffer
  HAL_SPI_Transmit(hspi, data, data_length, HAL_MAX_DELAY);
 800017c:	88fa      	ldrh	r2, [r7, #6]
 800017e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000182:	68b9      	ldr	r1, [r7, #8]
 8000184:	68f8      	ldr	r0, [r7, #12]
 8000186:	f001 ff61 	bl	800204c <HAL_SPI_Transmit>

  /// Pull D/C pin high
  HAL_GPIO_WritePin(n_oled_dc_GPIO_Port, n_oled_dc_Pin, GPIO_PIN_SET);
 800018a:	2201      	movs	r2, #1
 800018c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000190:	4807      	ldr	r0, [pc, #28]	; (80001b0 <oled_whisperer+0x64>)
 8000192:	f001 fa21 	bl	80015d8 <HAL_GPIO_WritePin>

  /// Pull CS pin high
  HAL_GPIO_WritePin(n_oled_cs_GPIO_Port, n_oled_cs_Pin, GPIO_PIN_SET);
 8000196:	2201      	movs	r2, #1
 8000198:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800019c:	4803      	ldr	r0, [pc, #12]	; (80001ac <oled_whisperer+0x60>)
 800019e:	f001 fa1b 	bl	80015d8 <HAL_GPIO_WritePin>

}
 80001a2:	bf00      	nop
 80001a4:	3710      	adds	r7, #16
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	40010c00 	.word	0x40010c00
 80001b0:	40010800 	.word	0x40010800

080001b4 <oled_init>:

void oled_init(SPI_HandleTypeDef* hspi) {
 80001b4:	b580      	push	{r7, lr}
 80001b6:	b082      	sub	sp, #8
 80001b8:	af00      	add	r7, sp, #0
 80001ba:	6078      	str	r0, [r7, #4]

  /// Pass the pre-determined init sequence to be transmitted
  oled_whisperer(hspi, initSeq, INIT_LENGTH, 0);
 80001bc:	2300      	movs	r3, #0
 80001be:	2219      	movs	r2, #25
 80001c0:	4905      	ldr	r1, [pc, #20]	; (80001d8 <oled_init+0x24>)
 80001c2:	6878      	ldr	r0, [r7, #4]
 80001c4:	f7ff ffc2 	bl	800014c <oled_whisperer>

  oled_blank_screen(hspi);
 80001c8:	6878      	ldr	r0, [r7, #4]
 80001ca:	f000 f8bd 	bl	8000348 <oled_blank_screen>

}
 80001ce:	bf00      	nop
 80001d0:	3708      	adds	r7, #8
 80001d2:	46bd      	mov	sp, r7
 80001d4:	bd80      	pop	{r7, pc}
 80001d6:	bf00      	nop
 80001d8:	08003714 	.word	0x08003714

080001dc <oled_set_column>:

void oled_set_column(SPI_HandleTypeDef* hspi, uint8_t start, uint8_t stop) {
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
 80001e4:	460b      	mov	r3, r1
 80001e6:	70fb      	strb	r3, [r7, #3]
 80001e8:	4613      	mov	r3, r2
 80001ea:	70bb      	strb	r3, [r7, #2]

  /// Construct command to send. 0x00 is the lower nibble of the start address. 0x10 is the upper nibble of the start address.
  uint8_t command[3] = {0x21, start % COLUMNS, stop % COLUMNS};
 80001ec:	2321      	movs	r3, #33	; 0x21
 80001ee:	733b      	strb	r3, [r7, #12]
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	737b      	strb	r3, [r7, #13]
 80001fa:	78bb      	ldrb	r3, [r7, #2]
 80001fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000200:	b2db      	uxtb	r3, r3
 8000202:	73bb      	strb	r3, [r7, #14]

  /// Pass the command to be transmitted
  oled_whisperer(hspi, command, 3, 0);
 8000204:	f107 010c 	add.w	r1, r7, #12
 8000208:	2300      	movs	r3, #0
 800020a:	2203      	movs	r2, #3
 800020c:	6878      	ldr	r0, [r7, #4]
 800020e:	f7ff ff9d 	bl	800014c <oled_whisperer>

}
 8000212:	bf00      	nop
 8000214:	3710      	adds	r7, #16
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
	...

0800021c <oled_set_page>:

void oled_set_page(SPI_HandleTypeDef* hspi, uint8_t start, uint8_t stop) {
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	460b      	mov	r3, r1
 8000226:	70fb      	strb	r3, [r7, #3]
 8000228:	4613      	mov	r3, r2
 800022a:	70bb      	strb	r3, [r7, #2]

  /// Construct command to send. 0xb0 is the page address command. mod 8 is to prevent invalid inputs
  uint8_t command[3] = {0x22, start % PAGES, stop % PAGES};
 800022c:	2322      	movs	r3, #34	; 0x22
 800022e:	733b      	strb	r3, [r7, #12]
 8000230:	78fa      	ldrb	r2, [r7, #3]
 8000232:	4b13      	ldr	r3, [pc, #76]	; (8000280 <oled_set_page+0x64>)
 8000234:	fba3 1302 	umull	r1, r3, r3, r2
 8000238:	1ad1      	subs	r1, r2, r3
 800023a:	0849      	lsrs	r1, r1, #1
 800023c:	440b      	add	r3, r1
 800023e:	0899      	lsrs	r1, r3, #2
 8000240:	460b      	mov	r3, r1
 8000242:	00db      	lsls	r3, r3, #3
 8000244:	1a5b      	subs	r3, r3, r1
 8000246:	1ad3      	subs	r3, r2, r3
 8000248:	b2db      	uxtb	r3, r3
 800024a:	737b      	strb	r3, [r7, #13]
 800024c:	78ba      	ldrb	r2, [r7, #2]
 800024e:	4b0c      	ldr	r3, [pc, #48]	; (8000280 <oled_set_page+0x64>)
 8000250:	fba3 1302 	umull	r1, r3, r3, r2
 8000254:	1ad1      	subs	r1, r2, r3
 8000256:	0849      	lsrs	r1, r1, #1
 8000258:	440b      	add	r3, r1
 800025a:	0899      	lsrs	r1, r3, #2
 800025c:	460b      	mov	r3, r1
 800025e:	00db      	lsls	r3, r3, #3
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	1ad3      	subs	r3, r2, r3
 8000264:	b2db      	uxtb	r3, r3
 8000266:	73bb      	strb	r3, [r7, #14]

  /// Set the page address
  oled_whisperer(hspi, command, 3, 0);
 8000268:	f107 010c 	add.w	r1, r7, #12
 800026c:	2300      	movs	r3, #0
 800026e:	2203      	movs	r2, #3
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f7ff ff6b 	bl	800014c <oled_whisperer>

}
 8000276:	bf00      	nop
 8000278:	3710      	adds	r7, #16
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	24924925 	.word	0x24924925

08000284 <oled_load_buffer>:

void oled_load_buffer(const uint8_t image[7][128]) {
 8000284:	b480      	push	{r7}
 8000286:	b085      	sub	sp, #20
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]

  for(uint8_t i = 0; i < PAGES; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	73fb      	strb	r3, [r7, #15]
 8000290:	e01a      	b.n	80002c8 <oled_load_buffer+0x44>

    for(uint8_t ii = 0; ii < COLUMNS; ii++) {
 8000292:	2300      	movs	r3, #0
 8000294:	73bb      	strb	r3, [r7, #14]
 8000296:	e010      	b.n	80002ba <oled_load_buffer+0x36>

      displayBuf[i][ii] = image[i][ii];
 8000298:	7bfb      	ldrb	r3, [r7, #15]
 800029a:	01db      	lsls	r3, r3, #7
 800029c:	687a      	ldr	r2, [r7, #4]
 800029e:	18d0      	adds	r0, r2, r3
 80002a0:	7bb9      	ldrb	r1, [r7, #14]
 80002a2:	7bfa      	ldrb	r2, [r7, #15]
 80002a4:	7bbb      	ldrb	r3, [r7, #14]
 80002a6:	5c40      	ldrb	r0, [r0, r1]
 80002a8:	490c      	ldr	r1, [pc, #48]	; (80002dc <oled_load_buffer+0x58>)
 80002aa:	01d2      	lsls	r2, r2, #7
 80002ac:	440a      	add	r2, r1
 80002ae:	4413      	add	r3, r2
 80002b0:	4602      	mov	r2, r0
 80002b2:	701a      	strb	r2, [r3, #0]
    for(uint8_t ii = 0; ii < COLUMNS; ii++) {
 80002b4:	7bbb      	ldrb	r3, [r7, #14]
 80002b6:	3301      	adds	r3, #1
 80002b8:	73bb      	strb	r3, [r7, #14]
 80002ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	daea      	bge.n	8000298 <oled_load_buffer+0x14>
  for(uint8_t i = 0; i < PAGES; i++) {
 80002c2:	7bfb      	ldrb	r3, [r7, #15]
 80002c4:	3301      	adds	r3, #1
 80002c6:	73fb      	strb	r3, [r7, #15]
 80002c8:	7bfb      	ldrb	r3, [r7, #15]
 80002ca:	2b06      	cmp	r3, #6
 80002cc:	d9e1      	bls.n	8000292 <oled_load_buffer+0xe>

    }

  }

}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	3714      	adds	r7, #20
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bc80      	pop	{r7}
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	2000008c 	.word	0x2000008c

080002e0 <oled_send_buffer>:

void oled_send_buffer(SPI_HandleTypeDef* hspi) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]

  /// Set the page range to [0 7]
  oled_set_page(hspi, 0, LAST_PAGE);
 80002e8:	2206      	movs	r2, #6
 80002ea:	2100      	movs	r1, #0
 80002ec:	6878      	ldr	r0, [r7, #4]
 80002ee:	f7ff ff95 	bl	800021c <oled_set_page>

  /// Set the column range to [0 127]
  oled_set_column(hspi, 0, LAST_COLUMN);
 80002f2:	227f      	movs	r2, #127	; 0x7f
 80002f4:	2100      	movs	r1, #0
 80002f6:	6878      	ldr	r0, [r7, #4]
 80002f8:	f7ff ff70 	bl	80001dc <oled_set_column>

  /// Loop over all 8 pages
  for(uint8_t i = 0; i < PAGES; i++) {
 80002fc:	2300      	movs	r3, #0
 80002fe:	73fb      	strb	r3, [r7, #15]
 8000300:	e017      	b.n	8000332 <oled_send_buffer+0x52>

    /// Loop over all 128 columns
    for(uint8_t ii = 0; ii < COLUMNS; ii++) {
 8000302:	2300      	movs	r3, #0
 8000304:	73bb      	strb	r3, [r7, #14]
 8000306:	e00d      	b.n	8000324 <oled_send_buffer+0x44>

      /// Send current byte of display ram
      oled_whisperer(hspi, &displayBuf[i][ii], 1, 1);
 8000308:	7bfa      	ldrb	r2, [r7, #15]
 800030a:	7bbb      	ldrb	r3, [r7, #14]
 800030c:	01d2      	lsls	r2, r2, #7
 800030e:	4413      	add	r3, r2
 8000310:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <oled_send_buffer+0x64>)
 8000312:	1899      	adds	r1, r3, r2
 8000314:	2301      	movs	r3, #1
 8000316:	2201      	movs	r2, #1
 8000318:	6878      	ldr	r0, [r7, #4]
 800031a:	f7ff ff17 	bl	800014c <oled_whisperer>
    for(uint8_t ii = 0; ii < COLUMNS; ii++) {
 800031e:	7bbb      	ldrb	r3, [r7, #14]
 8000320:	3301      	adds	r3, #1
 8000322:	73bb      	strb	r3, [r7, #14]
 8000324:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000328:	2b00      	cmp	r3, #0
 800032a:	daed      	bge.n	8000308 <oled_send_buffer+0x28>
  for(uint8_t i = 0; i < PAGES; i++) {
 800032c:	7bfb      	ldrb	r3, [r7, #15]
 800032e:	3301      	adds	r3, #1
 8000330:	73fb      	strb	r3, [r7, #15]
 8000332:	7bfb      	ldrb	r3, [r7, #15]
 8000334:	2b06      	cmp	r3, #6
 8000336:	d9e4      	bls.n	8000302 <oled_send_buffer+0x22>

    }

  }

}
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	2000008c 	.word	0x2000008c

08000348 <oled_blank_screen>:

void oled_blank_screen(SPI_HandleTypeDef* hspi) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]

  for(uint8_t i = 0; i < PAGES; i++) {
 8000350:	2300      	movs	r3, #0
 8000352:	73fb      	strb	r3, [r7, #15]
 8000354:	e014      	b.n	8000380 <oled_blank_screen+0x38>

    for(uint8_t ii = 0; ii < COLUMNS; ii++) {
 8000356:	2300      	movs	r3, #0
 8000358:	73bb      	strb	r3, [r7, #14]
 800035a:	e00a      	b.n	8000372 <oled_blank_screen+0x2a>

      displayBuf[i][ii] = 0;
 800035c:	7bfa      	ldrb	r2, [r7, #15]
 800035e:	7bbb      	ldrb	r3, [r7, #14]
 8000360:	490c      	ldr	r1, [pc, #48]	; (8000394 <oled_blank_screen+0x4c>)
 8000362:	01d2      	lsls	r2, r2, #7
 8000364:	440a      	add	r2, r1
 8000366:	4413      	add	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
    for(uint8_t ii = 0; ii < COLUMNS; ii++) {
 800036c:	7bbb      	ldrb	r3, [r7, #14]
 800036e:	3301      	adds	r3, #1
 8000370:	73bb      	strb	r3, [r7, #14]
 8000372:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000376:	2b00      	cmp	r3, #0
 8000378:	daf0      	bge.n	800035c <oled_blank_screen+0x14>
  for(uint8_t i = 0; i < PAGES; i++) {
 800037a:	7bfb      	ldrb	r3, [r7, #15]
 800037c:	3301      	adds	r3, #1
 800037e:	73fb      	strb	r3, [r7, #15]
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	2b06      	cmp	r3, #6
 8000384:	d9e7      	bls.n	8000356 <oled_blank_screen+0xe>

    }

  }

  oled_send_buffer(hspi);
 8000386:	6878      	ldr	r0, [r7, #4]
 8000388:	f7ff ffaa 	bl	80002e0 <oled_send_buffer>

}
 800038c:	bf00      	nop
 800038e:	3710      	adds	r7, #16
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	2000008c 	.word	0x2000008c

08000398 <oled_send_char>:

void oled_send_char(SPI_HandleTypeDef* hspi, char c) {
 8000398:	b580      	push	{r7, lr}
 800039a:	b084      	sub	sp, #16
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	460b      	mov	r3, r1
 80003a2:	70fb      	strb	r3, [r7, #3]

  uint8_t index = (c - ' ') % 96;
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	f1a3 0220 	sub.w	r2, r3, #32
 80003aa:	4b13      	ldr	r3, [pc, #76]	; (80003f8 <oled_send_char+0x60>)
 80003ac:	fb83 1302 	smull	r1, r3, r3, r2
 80003b0:	1119      	asrs	r1, r3, #4
 80003b2:	17d3      	asrs	r3, r2, #31
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	460b      	mov	r3, r1
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	440b      	add	r3, r1
 80003bc:	015b      	lsls	r3, r3, #5
 80003be:	1ad1      	subs	r1, r2, r3
 80003c0:	460b      	mov	r3, r1
 80003c2:	73bb      	strb	r3, [r7, #14]

  for(uint8_t i = 0; i < SMALL_FONT_WIDTH; i++) {
 80003c4:	2300      	movs	r3, #0
 80003c6:	73fb      	strb	r3, [r7, #15]
 80003c8:	e00d      	b.n	80003e6 <oled_send_char+0x4e>

    oled_whisperer(hspi, &font_small[index][i], 1, 1);
 80003ca:	7bba      	ldrb	r2, [r7, #14]
 80003cc:	7bfb      	ldrb	r3, [r7, #15]
 80003ce:	0092      	lsls	r2, r2, #2
 80003d0:	4413      	add	r3, r2
 80003d2:	4a0a      	ldr	r2, [pc, #40]	; (80003fc <oled_send_char+0x64>)
 80003d4:	1899      	adds	r1, r3, r2
 80003d6:	2301      	movs	r3, #1
 80003d8:	2201      	movs	r2, #1
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f7ff feb6 	bl	800014c <oled_whisperer>
  for(uint8_t i = 0; i < SMALL_FONT_WIDTH; i++) {
 80003e0:	7bfb      	ldrb	r3, [r7, #15]
 80003e2:	3301      	adds	r3, #1
 80003e4:	73fb      	strb	r3, [r7, #15]
 80003e6:	7bfb      	ldrb	r3, [r7, #15]
 80003e8:	2b03      	cmp	r3, #3
 80003ea:	d9ee      	bls.n	80003ca <oled_send_char+0x32>

  }

}
 80003ec:	bf00      	nop
 80003ee:	bf00      	nop
 80003f0:	3710      	adds	r7, #16
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	2aaaaaab 	.word	0x2aaaaaab
 80003fc:	08003594 	.word	0x08003594

08000400 <oled_send_string>:

void oled_send_string(SPI_HandleTypeDef* hspi, char* s, size_t len, uint8_t page, uint8_t column) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b084      	sub	sp, #16
 8000404:	af00      	add	r7, sp, #0
 8000406:	60f8      	str	r0, [r7, #12]
 8000408:	60b9      	str	r1, [r7, #8]
 800040a:	607a      	str	r2, [r7, #4]
 800040c:	70fb      	strb	r3, [r7, #3]

  oled_set_page(hspi, page, page);
 800040e:	78fa      	ldrb	r2, [r7, #3]
 8000410:	78fb      	ldrb	r3, [r7, #3]
 8000412:	4619      	mov	r1, r3
 8000414:	68f8      	ldr	r0, [r7, #12]
 8000416:	f7ff ff01 	bl	800021c <oled_set_page>

  oled_set_column(hspi, column, 127);
 800041a:	7e3b      	ldrb	r3, [r7, #24]
 800041c:	227f      	movs	r2, #127	; 0x7f
 800041e:	4619      	mov	r1, r3
 8000420:	68f8      	ldr	r0, [r7, #12]
 8000422:	f7ff fedb 	bl	80001dc <oled_set_column>

  for(;*s;) {
 8000426:	e007      	b.n	8000438 <oled_send_string+0x38>

    oled_send_char(hspi, *s++);
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	60ba      	str	r2, [r7, #8]
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4619      	mov	r1, r3
 8000432:	68f8      	ldr	r0, [r7, #12]
 8000434:	f7ff ffb0 	bl	8000398 <oled_send_char>
  for(;*s;) {
 8000438:	68bb      	ldr	r3, [r7, #8]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d1f3      	bne.n	8000428 <oled_send_string+0x28>

  }

}
 8000440:	bf00      	nop
 8000442:	bf00      	nop
 8000444:	3710      	adds	r7, #16
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <genTechnobabble>:
  "the Matrix...",
  "variables...",
  "IP address..."
};

char* genTechnobabble(char* technobabble, uint8_t constructive) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
 8000454:	460b      	mov	r3, r1
 8000456:	70fb      	strb	r3, [r7, #3]

	/// Randomly selects a verb and gets its length
	int verbNumber = rand() % ((constructive ? NUM_CONSTRUCT_VERBS : NUM_DESTRUCT_VERBS));
 8000458:	f002 f8bc 	bl	80025d4 <rand>
 800045c:	4602      	mov	r2, r0
 800045e:	78fb      	ldrb	r3, [r7, #3]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <genTechnobabble+0x1c>
 8000464:	2365      	movs	r3, #101	; 0x65
 8000466:	e000      	b.n	800046a <genTechnobabble+0x1e>
 8000468:	2364      	movs	r3, #100	; 0x64
 800046a:	fb92 f1f3 	sdiv	r1, r2, r3
 800046e:	fb01 f303 	mul.w	r3, r1, r3
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	60fb      	str	r3, [r7, #12]

	/// Randomly selects a noun and gets its length
	int nounNumber = rand() % (NUM_NOUNS);
 8000476:	f002 f8ad 	bl	80025d4 <rand>
 800047a:	4603      	mov	r3, r0
 800047c:	4a17      	ldr	r2, [pc, #92]	; (80004dc <genTechnobabble+0x90>)
 800047e:	fb82 1203 	smull	r1, r2, r2, r3
 8000482:	1151      	asrs	r1, r2, #5
 8000484:	17da      	asrs	r2, r3, #31
 8000486:	1a8a      	subs	r2, r1, r2
 8000488:	2164      	movs	r1, #100	; 0x64
 800048a:	fb01 f202 	mul.w	r2, r1, r2
 800048e:	1a9b      	subs	r3, r3, r2
 8000490:	60bb      	str	r3, [r7, #8]

	strncpy(technobabble, (constructive ? constructiveVerbs[verbNumber] : destructiveVerbs[verbNumber]), MAX_VERB_LENGTH);
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d006      	beq.n	80004a6 <genTechnobabble+0x5a>
 8000498:	68fa      	ldr	r2, [r7, #12]
 800049a:	4613      	mov	r3, r2
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	4a0f      	ldr	r2, [pc, #60]	; (80004e0 <genTechnobabble+0x94>)
 80004a2:	4413      	add	r3, r2
 80004a4:	e005      	b.n	80004b2 <genTechnobabble+0x66>
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	4613      	mov	r3, r2
 80004aa:	011b      	lsls	r3, r3, #4
 80004ac:	1a9b      	subs	r3, r3, r2
 80004ae:	4a0d      	ldr	r2, [pc, #52]	; (80004e4 <genTechnobabble+0x98>)
 80004b0:	4413      	add	r3, r2
 80004b2:	220f      	movs	r2, #15
 80004b4:	4619      	mov	r1, r3
 80004b6:	6878      	ldr	r0, [r7, #4]
 80004b8:	f002 f8ed 	bl	8002696 <strncpy>
	strncat(technobabble, nouns[nounNumber], MAX_NOUN_LENGTH);
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	4613      	mov	r3, r2
 80004c0:	011b      	lsls	r3, r3, #4
 80004c2:	1a9b      	subs	r3, r3, r2
 80004c4:	4a08      	ldr	r2, [pc, #32]	; (80004e8 <genTechnobabble+0x9c>)
 80004c6:	4413      	add	r3, r2
 80004c8:	220f      	movs	r2, #15
 80004ca:	4619      	mov	r1, r3
 80004cc:	6878      	ldr	r0, [r7, #4]
 80004ce:	f002 f8cf 	bl	8002670 <strncat>

	return technobabble;
 80004d2:	687b      	ldr	r3, [r7, #4]

}
 80004d4:	4618      	mov	r0, r3
 80004d6:	3710      	adds	r7, #16
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	51eb851f 	.word	0x51eb851f
 80004e0:	08003ab0 	.word	0x08003ab0
 80004e4:	0800409c 	.word	0x0800409c
 80004e8:	08004678 	.word	0x08004678

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b084      	sub	sp, #16
 80004f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f2:	f000 fb71 	bl	8000bd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f6:	f000 f84f 	bl	8000598 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f91d 	bl	8000738 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004fe:	f000 f8a7 	bl	8000650 <MX_ADC1_Init>
  MX_SPI2_Init();
 8000502:	f000 f8e3 	bl	80006cc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /// Set the initial state of the CS pin high
  HAL_GPIO_WritePin(n_oled_cs_GPIO_Port, n_oled_cs_Pin, GPIO_PIN_SET);
 8000506:	2201      	movs	r2, #1
 8000508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800050c:	481e      	ldr	r0, [pc, #120]	; (8000588 <main+0x9c>)
 800050e:	f001 f863 	bl	80015d8 <HAL_GPIO_WritePin>

  HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f000 fbc2 	bl	8000c9c <HAL_Delay>

  /// Initialize oled to default factory parameters
  oled_init(&hspi2);
 8000518:	481c      	ldr	r0, [pc, #112]	; (800058c <main+0xa0>)
 800051a:	f7ff fe4b 	bl	80001b4 <oled_init>

  HAL_Delay(100);
 800051e:	2064      	movs	r0, #100	; 0x64
 8000520:	f000 fbbc 	bl	8000c9c <HAL_Delay>

  /// Load image into buffer to send to oled
  oled_load_buffer(bad_apple);
 8000524:	481a      	ldr	r0, [pc, #104]	; (8000590 <main+0xa4>)
 8000526:	f7ff fead 	bl	8000284 <oled_load_buffer>

  /// Send buffer to oled
  oled_send_buffer(&hspi2);
 800052a:	4818      	ldr	r0, [pc, #96]	; (800058c <main+0xa0>)
 800052c:	f7ff fed8 	bl	80002e0 <oled_send_buffer>

  char* technobabble = (char*)calloc(TECHNOLENGTH, 1);
 8000530:	2101      	movs	r1, #1
 8000532:	201e      	movs	r0, #30
 8000534:	f001 ff6c 	bl	8002410 <calloc>
 8000538:	4603      	mov	r3, r0
 800053a:	603b      	str	r3, [r7, #0]
  uint8_t i = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	71fb      	strb	r3, [r7, #7]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    genTechnobabble(technobabble, 1);
 8000540:	2101      	movs	r1, #1
 8000542:	6838      	ldr	r0, [r7, #0]
 8000544:	f7ff ff82 	bl	800044c <genTechnobabble>
    oled_send_string(&hspi2, technobabble, sizeof(technobabble), (i++) % 7, 0);
 8000548:	79fa      	ldrb	r2, [r7, #7]
 800054a:	1c53      	adds	r3, r2, #1
 800054c:	71fb      	strb	r3, [r7, #7]
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <main+0xa8>)
 8000550:	fba3 1302 	umull	r1, r3, r3, r2
 8000554:	1ad1      	subs	r1, r2, r3
 8000556:	0849      	lsrs	r1, r1, #1
 8000558:	440b      	add	r3, r1
 800055a:	0899      	lsrs	r1, r3, #2
 800055c:	460b      	mov	r3, r1
 800055e:	00db      	lsls	r3, r3, #3
 8000560:	1a5b      	subs	r3, r3, r1
 8000562:	1ad3      	subs	r3, r2, r3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2200      	movs	r2, #0
 8000568:	9200      	str	r2, [sp, #0]
 800056a:	2204      	movs	r2, #4
 800056c:	6839      	ldr	r1, [r7, #0]
 800056e:	4807      	ldr	r0, [pc, #28]	; (800058c <main+0xa0>)
 8000570:	f7ff ff46 	bl	8000400 <oled_send_string>
    HAL_Delay(2000);
 8000574:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000578:	f000 fb90 	bl	8000c9c <HAL_Delay>
    oled_blank_screen(&hspi2);
 800057c:	4803      	ldr	r0, [pc, #12]	; (800058c <main+0xa0>)
 800057e:	f7ff fee3 	bl	8000348 <oled_blank_screen>
    genTechnobabble(technobabble, 1);
 8000582:	bf00      	nop
 8000584:	e7dc      	b.n	8000540 <main+0x54>
 8000586:	bf00      	nop
 8000588:	40010c00 	.word	0x40010c00
 800058c:	2000043c 	.word	0x2000043c
 8000590:	08003730 	.word	0x08003730
 8000594:	24924925 	.word	0x24924925

08000598 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b094      	sub	sp, #80	; 0x50
 800059c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005a2:	2228      	movs	r2, #40	; 0x28
 80005a4:	2100      	movs	r1, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 ff64 	bl	8002474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ac:	f107 0314 	add.w	r3, r7, #20
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
 80005ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005bc:	1d3b      	adds	r3, r7, #4
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d6:	2301      	movs	r3, #1
 80005d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005da:	2302      	movs	r3, #2
 80005dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ee:	4618      	mov	r0, r3
 80005f0:	f001 f80a 	bl	8001608 <HAL_RCC_OscConfig>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d001      	beq.n	80005fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005fa:	f000 f923 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005fe:	230f      	movs	r3, #15
 8000600:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000602:	2302      	movs	r3, #2
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800060a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800060e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000614:	f107 0314 	add.w	r3, r7, #20
 8000618:	2102      	movs	r1, #2
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fa76 	bl	8001b0c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000626:	f000 f90d 	bl	8000844 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800062a:	2302      	movs	r3, #2
 800062c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800062e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000632:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4618      	mov	r0, r3
 8000638:	f001 fbce 	bl	8001dd8 <HAL_RCCEx_PeriphCLKConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000642:	f000 f8ff 	bl	8000844 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000660:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <MX_ADC1_Init+0x74>)
 8000662:	4a19      	ldr	r2, [pc, #100]	; (80006c8 <MX_ADC1_Init+0x78>)
 8000664:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000666:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_ADC1_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800066c:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <MX_ADC1_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_ADC1_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_ADC1_Init+0x74>)
 800067a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800067e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000680:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <MX_ADC1_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_ADC1_Init+0x74>)
 8000688:	2201      	movs	r2, #1
 800068a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068c:	480d      	ldr	r0, [pc, #52]	; (80006c4 <MX_ADC1_Init+0x74>)
 800068e:	f000 fb29 	bl	8000ce4 <HAL_ADC_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f8d4 	bl	8000844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a0:	2301      	movs	r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_ADC1_Init+0x74>)
 80006ae:	f000 fbf1 	bl	8000e94 <HAL_ADC_ConfigChannel>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80006b8:	f000 f8c4 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006bc:	bf00      	nop
 80006be:	3710      	adds	r7, #16
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000040c 	.word	0x2000040c
 80006c8:	40012400 	.word	0x40012400

080006cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_SPI2_Init+0x64>)
 80006d2:	4a18      	ldr	r2, [pc, #96]	; (8000734 <MX_SPI2_Init+0x68>)
 80006d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_SPI2_Init+0x64>)
 80006d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006de:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_SPI2_Init+0x64>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006e4:	4b12      	ldr	r3, [pc, #72]	; (8000730 <MX_SPI2_Init+0x64>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_SPI2_Init+0x64>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <MX_SPI2_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_SPI2_Init+0x64>)
 80006f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_SPI2_Init+0x64>)
 8000700:	2220      	movs	r2, #32
 8000702:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000704:	4b0a      	ldr	r3, [pc, #40]	; (8000730 <MX_SPI2_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_SPI2_Init+0x64>)
 800070c:	2200      	movs	r2, #0
 800070e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000710:	4b07      	ldr	r3, [pc, #28]	; (8000730 <MX_SPI2_Init+0x64>)
 8000712:	2200      	movs	r2, #0
 8000714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_SPI2_Init+0x64>)
 8000718:	220a      	movs	r2, #10
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_SPI2_Init+0x64>)
 800071e:	f001 fc11 	bl	8001f44 <HAL_SPI_Init>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000728:	f000 f88c 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000043c 	.word	0x2000043c
 8000734:	40003800 	.word	0x40003800

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074c:	4b39      	ldr	r3, [pc, #228]	; (8000834 <MX_GPIO_Init+0xfc>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a38      	ldr	r2, [pc, #224]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <MX_GPIO_Init+0xfc>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	4b33      	ldr	r3, [pc, #204]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a32      	ldr	r2, [pc, #200]	; (8000834 <MX_GPIO_Init+0xfc>)
 800076a:	f043 0320 	orr.w	r3, r3, #32
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b30      	ldr	r3, [pc, #192]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b2d      	ldr	r3, [pc, #180]	; (8000834 <MX_GPIO_Init+0xfc>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a2c      	ldr	r2, [pc, #176]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <MX_GPIO_Init+0xfc>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <MX_GPIO_Init+0xfc>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a26      	ldr	r2, [pc, #152]	; (8000834 <MX_GPIO_Init+0xfc>)
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b24      	ldr	r3, [pc, #144]	; (8000834 <MX_GPIO_Init+0xfc>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, user_led_Pin|test_pin_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 80007b2:	4821      	ldr	r0, [pc, #132]	; (8000838 <MX_GPIO_Init+0x100>)
 80007b4:	f000 ff10 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(n_oled_cs_GPIO_Port, n_oled_cs_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007be:	481f      	ldr	r0, [pc, #124]	; (800083c <MX_GPIO_Init+0x104>)
 80007c0:	f000 ff0a 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(n_oled_dc_GPIO_Port, n_oled_dc_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007ca:	481d      	ldr	r0, [pc, #116]	; (8000840 <MX_GPIO_Init+0x108>)
 80007cc:	f000 ff04 	bl	80015d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : user_led_Pin test_pin_Pin */
  GPIO_InitStruct.Pin = user_led_Pin|test_pin_Pin;
 80007d0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	; (8000838 <MX_GPIO_Init+0x100>)
 80007ea:	f000 fd71 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : n_oled_cs_Pin */
  GPIO_InitStruct.Pin = n_oled_cs_Pin;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fc:	2302      	movs	r3, #2
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(n_oled_cs_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0310 	add.w	r3, r7, #16
 8000804:	4619      	mov	r1, r3
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_GPIO_Init+0x104>)
 8000808:	f000 fd62 	bl	80012d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : n_oled_dc_Pin */
  GPIO_InitStruct.Pin = n_oled_dc_Pin;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2302      	movs	r3, #2
 800081c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(n_oled_dc_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0310 	add.w	r3, r7, #16
 8000822:	4619      	mov	r1, r3
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_GPIO_Init+0x108>)
 8000826:	f000 fd53 	bl	80012d0 <HAL_GPIO_Init>

}
 800082a:	bf00      	nop
 800082c:	3720      	adds	r7, #32
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021000 	.word	0x40021000
 8000838:	40011000 	.word	0x40011000
 800083c:	40010c00 	.word	0x40010c00
 8000840:	40010800 	.word	0x40010800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000856:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_MspInit+0x40>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <HAL_MspInit+0x40>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6193      	str	r3, [r2, #24]
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_MspInit+0x40>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_MspInit+0x40>)
 8000870:	69db      	ldr	r3, [r3, #28]
 8000872:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_MspInit+0x40>)
 8000874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000878:	61d3      	str	r3, [r2, #28]
 800087a:	4b05      	ldr	r3, [pc, #20]	; (8000890 <HAL_MspInit+0x40>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000886:	bf00      	nop
 8000888:	370c      	adds	r7, #12
 800088a:	46bd      	mov	sp, r7
 800088c:	bc80      	pop	{r7}
 800088e:	4770      	bx	lr
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a14      	ldr	r2, [pc, #80]	; (8000900 <HAL_ADC_MspInit+0x6c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d121      	bne.n	80008f8 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008b4:	4b13      	ldr	r3, [pc, #76]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008b6:	699b      	ldr	r3, [r3, #24]
 80008b8:	4a12      	ldr	r2, [pc, #72]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008be:	6193      	str	r3, [r2, #24]
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a0c      	ldr	r2, [pc, #48]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008d2:	f043 0304 	orr.w	r3, r3, #4
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <HAL_ADC_MspInit+0x70>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f003 0304 	and.w	r3, r3, #4
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008e4:	2301      	movs	r3, #1
 80008e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e8:	2303      	movs	r3, #3
 80008ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	4619      	mov	r1, r3
 80008f2:	4805      	ldr	r0, [pc, #20]	; (8000908 <HAL_ADC_MspInit+0x74>)
 80008f4:	f000 fcec 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40012400 	.word	0x40012400
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a1c      	ldr	r2, [pc, #112]	; (8000998 <HAL_SPI_MspInit+0x8c>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d131      	bne.n	8000990 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800092c:	4b1b      	ldr	r3, [pc, #108]	; (800099c <HAL_SPI_MspInit+0x90>)
 800092e:	69db      	ldr	r3, [r3, #28]
 8000930:	4a1a      	ldr	r2, [pc, #104]	; (800099c <HAL_SPI_MspInit+0x90>)
 8000932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000936:	61d3      	str	r3, [r2, #28]
 8000938:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_SPI_MspInit+0x90>)
 800093a:	69db      	ldr	r3, [r3, #28]
 800093c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_SPI_MspInit+0x90>)
 8000946:	699b      	ldr	r3, [r3, #24]
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <HAL_SPI_MspInit+0x90>)
 800094a:	f043 0308 	orr.w	r3, r3, #8
 800094e:	6193      	str	r3, [r2, #24]
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_SPI_MspInit+0x90>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	f003 0308 	and.w	r3, r3, #8
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800095c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000962:	2302      	movs	r3, #2
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2303      	movs	r3, #3
 8000968:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800096a:	f107 0310 	add.w	r3, r7, #16
 800096e:	4619      	mov	r1, r3
 8000970:	480b      	ldr	r0, [pc, #44]	; (80009a0 <HAL_SPI_MspInit+0x94>)
 8000972:	f000 fcad 	bl	80012d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000976:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800097a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000984:	f107 0310 	add.w	r3, r7, #16
 8000988:	4619      	mov	r1, r3
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_SPI_MspInit+0x94>)
 800098c:	f000 fca0 	bl	80012d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000990:	bf00      	nop
 8000992:	3720      	adds	r7, #32
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40003800 	.word	0x40003800
 800099c:	40021000 	.word	0x40021000
 80009a0:	40010c00 	.word	0x40010c00

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	bf00      	nop
 80009aa:	e7fd      	b.n	80009a8 <NMI_Handler+0x4>

080009ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <HardFault_Handler+0x4>

080009b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <MemManage_Handler+0x4>

080009bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <BusFault_Handler+0x4>

080009c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <UsageFault_Handler+0x4>

080009cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bc80      	pop	{r7}
 80009d6:	4770      	bx	lr

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr

080009e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f4:	f000 f936 	bl	8000c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}

080009fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	return 1;
 8000a00:	2301      	movs	r3, #1
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <_kill>:

int _kill(int pid, int sig)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b082      	sub	sp, #8
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000a14:	f001 fd04 	bl	8002420 <__errno>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2216      	movs	r2, #22
 8000a1c:	601a      	str	r2, [r3, #0]
	return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <_exit>:

void _exit (int status)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000a32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a36:	6878      	ldr	r0, [r7, #4]
 8000a38:	f7ff ffe7 	bl	8000a0a <_kill>
	while (1) {}		/* Make sure we hang here */
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <_exit+0x12>

08000a40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e00a      	b.n	8000a68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a52:	f3af 8000 	nop.w
 8000a56:	4601      	mov	r1, r0
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	1c5a      	adds	r2, r3, #1
 8000a5c:	60ba      	str	r2, [r7, #8]
 8000a5e:	b2ca      	uxtb	r2, r1
 8000a60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf0      	blt.n	8000a52 <_read+0x12>
	}

return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b086      	sub	sp, #24
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	60f8      	str	r0, [r7, #12]
 8000a82:	60b9      	str	r1, [r7, #8]
 8000a84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	e009      	b.n	8000aa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a8c:	68bb      	ldr	r3, [r7, #8]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	60ba      	str	r2, [r7, #8]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	617b      	str	r3, [r7, #20]
 8000aa0:	697a      	ldr	r2, [r7, #20]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	dbf1      	blt.n	8000a8c <_write+0x12>
	}
	return len;
 8000aa8:	687b      	ldr	r3, [r7, #4]
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3718      	adds	r7, #24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_close>:

int _close(int file)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	b083      	sub	sp, #12
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8000aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ad8:	605a      	str	r2, [r3, #4]
	return 0;
 8000ada:	2300      	movs	r3, #0
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bc80      	pop	{r7}
 8000ae4:	4770      	bx	lr

08000ae6 <_isatty>:

int _isatty(int file)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
	return 1;
 8000aee:	2301      	movs	r3, #1
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	370c      	adds	r7, #12
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bc80      	pop	{r7}
 8000af8:	4770      	bx	lr

08000afa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b085      	sub	sp, #20
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	60f8      	str	r0, [r7, #12]
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
	return 0;
 8000b06:	2300      	movs	r3, #0
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	3714      	adds	r7, #20
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr
	...

08000b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b1c:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <_sbrk+0x5c>)
 8000b1e:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <_sbrk+0x60>)
 8000b20:	1ad3      	subs	r3, r2, r3
 8000b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <_sbrk+0x64>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d102      	bne.n	8000b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b30:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <_sbrk+0x64>)
 8000b32:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <_sbrk+0x68>)
 8000b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b36:	4b10      	ldr	r3, [pc, #64]	; (8000b78 <_sbrk+0x64>)
 8000b38:	681a      	ldr	r2, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4413      	add	r3, r2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	429a      	cmp	r2, r3
 8000b42:	d207      	bcs.n	8000b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b44:	f001 fc6c 	bl	8002420 <__errno>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	220c      	movs	r2, #12
 8000b4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b52:	e009      	b.n	8000b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <_sbrk+0x64>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <_sbrk+0x64>)
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4413      	add	r3, r2
 8000b62:	4a05      	ldr	r2, [pc, #20]	; (8000b78 <_sbrk+0x64>)
 8000b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b66:	68fb      	ldr	r3, [r7, #12]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20005000 	.word	0x20005000
 8000b74:	00000400 	.word	0x00000400
 8000b78:	20000494 	.word	0x20000494
 8000b7c:	200004b0 	.word	0x200004b0

08000b80 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b8e:	490d      	ldr	r1, [pc, #52]	; (8000bc4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b90:	4a0d      	ldr	r2, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba4:	4c0a      	ldr	r4, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb2:	f7ff ffe5 	bl	8000b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bb6:	f001 fc39 	bl	800242c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bba:	f7ff fc97 	bl	80004ec <main>
  bx lr
 8000bbe:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bc8:	08004da0 	.word	0x08004da0
  ldr r2, =_sbss
 8000bcc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd0:	200004ac 	.word	0x200004ac

08000bd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd4:	e7fe      	b.n	8000bd4 <ADC1_2_IRQHandler>
	...

08000bd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <HAL_Init+0x28>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_Init+0x28>)
 8000be2:	f043 0310 	orr.w	r3, r3, #16
 8000be6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be8:	2003      	movs	r0, #3
 8000bea:	f000 fb3d 	bl	8001268 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bee:	200f      	movs	r0, #15
 8000bf0:	f000 f808 	bl	8000c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf4:	f7ff fe2c 	bl	8000850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40022000 	.word	0x40022000

08000c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <HAL_InitTick+0x54>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x58>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 fb47 	bl	80012b6 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b0f      	cmp	r3, #15
 8000c36:	d80a      	bhi.n	8000c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	6879      	ldr	r1, [r7, #4]
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c40:	f000 fb1d 	bl	800127e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c44:	4a06      	ldr	r2, [pc, #24]	; (8000c60 <HAL_InitTick+0x5c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e000      	b.n	8000c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	20000008 	.word	0x20000008
 8000c60:	20000004 	.word	0x20000004

08000c64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_IncTick+0x1c>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	4a03      	ldr	r2, [pc, #12]	; (8000c84 <HAL_IncTick+0x20>)
 8000c76:	6013      	str	r3, [r2, #0]
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bc80      	pop	{r7}
 8000c7e:	4770      	bx	lr
 8000c80:	20000008 	.word	0x20000008
 8000c84:	20000498 	.word	0x20000498

08000c88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <HAL_GetTick+0x10>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr
 8000c98:	20000498 	.word	0x20000498

08000c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ca4:	f7ff fff0 	bl	8000c88 <HAL_GetTick>
 8000ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cb4:	d005      	beq.n	8000cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <HAL_Delay+0x44>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	461a      	mov	r2, r3
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cc2:	bf00      	nop
 8000cc4:	f7ff ffe0 	bl	8000c88 <HAL_GetTick>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	d8f7      	bhi.n	8000cc4 <HAL_Delay+0x28>
  {
  }
}
 8000cd4:	bf00      	nop
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000008 	.word	0x20000008

08000ce4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cec:	2300      	movs	r3, #0
 8000cee:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e0be      	b.n	8000e84 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d109      	bne.n	8000d28 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fdb6 	bl	8000894 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f000 f9ab 	bl	8001084 <ADC_ConversionStop_Disable>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d36:	f003 0310 	and.w	r3, r3, #16
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	f040 8099 	bne.w	8000e72 <HAL_ADC_Init+0x18e>
 8000d40:	7dfb      	ldrb	r3, [r7, #23]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8095 	bne.w	8000e72 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d50:	f023 0302 	bic.w	r3, r3, #2
 8000d54:	f043 0202 	orr.w	r2, r3, #2
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d64:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7b1b      	ldrb	r3, [r3, #12]
 8000d6a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d6c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d7c:	d003      	beq.n	8000d86 <HAL_ADC_Init+0xa2>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	689b      	ldr	r3, [r3, #8]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d102      	bne.n	8000d8c <HAL_ADC_Init+0xa8>
 8000d86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d8a:	e000      	b.n	8000d8e <HAL_ADC_Init+0xaa>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7d1b      	ldrb	r3, [r3, #20]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d119      	bne.n	8000dd0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	7b1b      	ldrb	r3, [r3, #12]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d109      	bne.n	8000db8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	035a      	lsls	r2, r3, #13
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	e00b      	b.n	8000dd0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbc:	f043 0220 	orr.w	r2, r3, #32
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc8:	f043 0201 	orr.w	r2, r3, #1
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	693a      	ldr	r2, [r7, #16]
 8000de0:	430a      	orrs	r2, r1
 8000de2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <HAL_ADC_Init+0x1a8>)
 8000dec:	4013      	ands	r3, r2
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	6812      	ldr	r2, [r2, #0]
 8000df2:	68b9      	ldr	r1, [r7, #8]
 8000df4:	430b      	orrs	r3, r1
 8000df6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	689b      	ldr	r3, [r3, #8]
 8000dfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e00:	d003      	beq.n	8000e0a <HAL_ADC_Init+0x126>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	2b01      	cmp	r3, #1
 8000e08:	d104      	bne.n	8000e14 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	051b      	lsls	r3, r3, #20
 8000e12:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	430a      	orrs	r2, r1
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_ADC_Init+0x1ac>)
 8000e30:	4013      	ands	r3, r2
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	d10b      	bne.n	8000e50 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e42:	f023 0303 	bic.w	r3, r3, #3
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e4e:	e018      	b.n	8000e82 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e54:	f023 0312 	bic.w	r3, r3, #18
 8000e58:	f043 0210 	orr.w	r2, r3, #16
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	f043 0201 	orr.w	r2, r3, #1
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e70:	e007      	b.n	8000e82 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e76:	f043 0210 	orr.w	r2, r3, #16
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	ffe1f7fd 	.word	0xffe1f7fd
 8000e90:	ff1f0efe 	.word	0xff1f0efe

08000e94 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d101      	bne.n	8000eb4 <HAL_ADC_ConfigChannel+0x20>
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e0dc      	b.n	800106e <HAL_ADC_ConfigChannel+0x1da>
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b06      	cmp	r3, #6
 8000ec2:	d81c      	bhi.n	8000efe <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	009b      	lsls	r3, r3, #2
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3b05      	subs	r3, #5
 8000ed6:	221f      	movs	r2, #31
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	4019      	ands	r1, r3
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	3b05      	subs	r3, #5
 8000ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34
 8000efc:	e03c      	b.n	8000f78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	2b0c      	cmp	r3, #12
 8000f04:	d81c      	bhi.n	8000f40 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685a      	ldr	r2, [r3, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	4413      	add	r3, r2
 8000f16:	3b23      	subs	r3, #35	; 0x23
 8000f18:	221f      	movs	r2, #31
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	4019      	ands	r1, r3
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	6818      	ldr	r0, [r3, #0]
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685a      	ldr	r2, [r3, #4]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	4413      	add	r3, r2
 8000f30:	3b23      	subs	r3, #35	; 0x23
 8000f32:	fa00 f203 	lsl.w	r2, r0, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000f3e:	e01b      	b.n	8000f78 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	3b41      	subs	r3, #65	; 0x41
 8000f52:	221f      	movs	r2, #31
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	43db      	mvns	r3, r3
 8000f5a:	4019      	ands	r1, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	685a      	ldr	r2, [r3, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	4413      	add	r3, r2
 8000f6a:	3b41      	subs	r3, #65	; 0x41
 8000f6c:	fa00 f203 	lsl.w	r2, r0, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b09      	cmp	r3, #9
 8000f7e:	d91c      	bls.n	8000fba <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68d9      	ldr	r1, [r3, #12]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b1e      	subs	r3, #30
 8000f92:	2207      	movs	r2, #7
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	4019      	ands	r1, r3
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6898      	ldr	r0, [r3, #8]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	005b      	lsls	r3, r3, #1
 8000fa8:	4413      	add	r3, r2
 8000faa:	3b1e      	subs	r3, #30
 8000fac:	fa00 f203 	lsl.w	r2, r0, r3
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	430a      	orrs	r2, r1
 8000fb6:	60da      	str	r2, [r3, #12]
 8000fb8:	e019      	b.n	8000fee <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6919      	ldr	r1, [r3, #16]
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	681a      	ldr	r2, [r3, #0]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	2207      	movs	r2, #7
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	4019      	ands	r1, r3
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	6898      	ldr	r0, [r3, #8]
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	fa00 f203 	lsl.w	r2, r0, r3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	430a      	orrs	r2, r1
 8000fec:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b10      	cmp	r3, #16
 8000ff4:	d003      	beq.n	8000ffe <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000ffa:	2b11      	cmp	r3, #17
 8000ffc:	d132      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <HAL_ADC_ConfigChannel+0x1e4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d125      	bne.n	8001054 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d126      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001024:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b10      	cmp	r3, #16
 800102c:	d11a      	bne.n	8001064 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_ADC_ConfigChannel+0x1e8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <HAL_ADC_ConfigChannel+0x1ec>)
 8001034:	fba2 2303 	umull	r2, r3, r2, r3
 8001038:	0c9a      	lsrs	r2, r3, #18
 800103a:	4613      	mov	r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	4413      	add	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001044:	e002      	b.n	800104c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3b01      	subs	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d1f9      	bne.n	8001046 <HAL_ADC_ConfigChannel+0x1b2>
 8001052:	e007      	b.n	8001064 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001058:	f043 0220 	orr.w	r2, r3, #32
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800106c:	7bfb      	ldrb	r3, [r7, #15]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	bc80      	pop	{r7}
 8001076:	4770      	bx	lr
 8001078:	40012400 	.word	0x40012400
 800107c:	20000000 	.word	0x20000000
 8001080:	431bde83 	.word	0x431bde83

08001084 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b01      	cmp	r3, #1
 800109c:	d12e      	bne.n	80010fc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689a      	ldr	r2, [r3, #8]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f022 0201 	bic.w	r2, r2, #1
 80010ac:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010ae:	f7ff fdeb 	bl	8000c88 <HAL_GetTick>
 80010b2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010b4:	e01b      	b.n	80010ee <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010b6:	f7ff fde7 	bl	8000c88 <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d914      	bls.n	80010ee <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d10d      	bne.n	80010ee <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f043 0210 	orr.w	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	f043 0201 	orr.w	r2, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e007      	b.n	80010fe <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d0dc      	beq.n	80010b6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bc80      	pop	{r7}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	bc80      	pop	{r7}
 8001222:	4770      	bx	lr

08001224 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3b01      	subs	r3, #1
 8001230:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001234:	d301      	bcc.n	800123a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001236:	2301      	movs	r3, #1
 8001238:	e00f      	b.n	800125a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123a:	4a0a      	ldr	r2, [pc, #40]	; (8001264 <SysTick_Config+0x40>)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3b01      	subs	r3, #1
 8001240:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001242:	210f      	movs	r1, #15
 8001244:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001248:	f7ff ff90 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <SysTick_Config+0x40>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001252:	4b04      	ldr	r3, [pc, #16]	; (8001264 <SysTick_Config+0x40>)
 8001254:	2207      	movs	r2, #7
 8001256:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	e000e010 	.word	0xe000e010

08001268 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001270:	6878      	ldr	r0, [r7, #4]
 8001272:	f7ff ff49 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 8001276:	bf00      	nop
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800127e:	b580      	push	{r7, lr}
 8001280:	b086      	sub	sp, #24
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001290:	f7ff ff5e 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001294:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	6978      	ldr	r0, [r7, #20]
 800129c:	f7ff ff90 	bl	80011c0 <NVIC_EncodePriority>
 80012a0:	4602      	mov	r2, r0
 80012a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff5f 	bl	800116c <__NVIC_SetPriority>
}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff ffb0 	bl	8001224 <SysTick_Config>
 80012c4:	4603      	mov	r3, r0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b08b      	sub	sp, #44	; 0x2c
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
 80012d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012da:	2300      	movs	r3, #0
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80012de:	2300      	movs	r3, #0
 80012e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012e2:	e169      	b.n	80015b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80012e4:	2201      	movs	r2, #1
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	69fa      	ldr	r2, [r7, #28]
 80012f4:	4013      	ands	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	f040 8158 	bne.w	80015b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	4a9a      	ldr	r2, [pc, #616]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d05e      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800130c:	4a98      	ldr	r2, [pc, #608]	; (8001570 <HAL_GPIO_Init+0x2a0>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d875      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001312:	4a98      	ldr	r2, [pc, #608]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d058      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001318:	4a96      	ldr	r2, [pc, #600]	; (8001574 <HAL_GPIO_Init+0x2a4>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d86f      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800131e:	4a96      	ldr	r2, [pc, #600]	; (8001578 <HAL_GPIO_Init+0x2a8>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d052      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001324:	4a94      	ldr	r2, [pc, #592]	; (8001578 <HAL_GPIO_Init+0x2a8>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d869      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800132a:	4a94      	ldr	r2, [pc, #592]	; (800157c <HAL_GPIO_Init+0x2ac>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d04c      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 8001330:	4a92      	ldr	r2, [pc, #584]	; (800157c <HAL_GPIO_Init+0x2ac>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d863      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001336:	4a92      	ldr	r2, [pc, #584]	; (8001580 <HAL_GPIO_Init+0x2b0>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d046      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
 800133c:	4a90      	ldr	r2, [pc, #576]	; (8001580 <HAL_GPIO_Init+0x2b0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d85d      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 8001342:	2b12      	cmp	r3, #18
 8001344:	d82a      	bhi.n	800139c <HAL_GPIO_Init+0xcc>
 8001346:	2b12      	cmp	r3, #18
 8001348:	d859      	bhi.n	80013fe <HAL_GPIO_Init+0x12e>
 800134a:	a201      	add	r2, pc, #4	; (adr r2, 8001350 <HAL_GPIO_Init+0x80>)
 800134c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001350:	080013cb 	.word	0x080013cb
 8001354:	080013a5 	.word	0x080013a5
 8001358:	080013b7 	.word	0x080013b7
 800135c:	080013f9 	.word	0x080013f9
 8001360:	080013ff 	.word	0x080013ff
 8001364:	080013ff 	.word	0x080013ff
 8001368:	080013ff 	.word	0x080013ff
 800136c:	080013ff 	.word	0x080013ff
 8001370:	080013ff 	.word	0x080013ff
 8001374:	080013ff 	.word	0x080013ff
 8001378:	080013ff 	.word	0x080013ff
 800137c:	080013ff 	.word	0x080013ff
 8001380:	080013ff 	.word	0x080013ff
 8001384:	080013ff 	.word	0x080013ff
 8001388:	080013ff 	.word	0x080013ff
 800138c:	080013ff 	.word	0x080013ff
 8001390:	080013ff 	.word	0x080013ff
 8001394:	080013ad 	.word	0x080013ad
 8001398:	080013c1 	.word	0x080013c1
 800139c:	4a79      	ldr	r2, [pc, #484]	; (8001584 <HAL_GPIO_Init+0x2b4>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d013      	beq.n	80013ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013a2:	e02c      	b.n	80013fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	623b      	str	r3, [r7, #32]
          break;
 80013aa:	e029      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	3304      	adds	r3, #4
 80013b2:	623b      	str	r3, [r7, #32]
          break;
 80013b4:	e024      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	3308      	adds	r3, #8
 80013bc:	623b      	str	r3, [r7, #32]
          break;
 80013be:	e01f      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	330c      	adds	r3, #12
 80013c6:	623b      	str	r3, [r7, #32]
          break;
 80013c8:	e01a      	b.n	8001400 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d102      	bne.n	80013d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80013d2:	2304      	movs	r3, #4
 80013d4:	623b      	str	r3, [r7, #32]
          break;
 80013d6:	e013      	b.n	8001400 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d105      	bne.n	80013ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013e0:	2308      	movs	r3, #8
 80013e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69fa      	ldr	r2, [r7, #28]
 80013e8:	611a      	str	r2, [r3, #16]
          break;
 80013ea:	e009      	b.n	8001400 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80013ec:	2308      	movs	r3, #8
 80013ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69fa      	ldr	r2, [r7, #28]
 80013f4:	615a      	str	r2, [r3, #20]
          break;
 80013f6:	e003      	b.n	8001400 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
          break;
 80013fc:	e000      	b.n	8001400 <HAL_GPIO_Init+0x130>
          break;
 80013fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	2bff      	cmp	r3, #255	; 0xff
 8001404:	d801      	bhi.n	800140a <HAL_GPIO_Init+0x13a>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	e001      	b.n	800140e <HAL_GPIO_Init+0x13e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3304      	adds	r3, #4
 800140e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	2bff      	cmp	r3, #255	; 0xff
 8001414:	d802      	bhi.n	800141c <HAL_GPIO_Init+0x14c>
 8001416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	e002      	b.n	8001422 <HAL_GPIO_Init+0x152>
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	3b08      	subs	r3, #8
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	210f      	movs	r1, #15
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	401a      	ands	r2, r3
 8001434:	6a39      	ldr	r1, [r7, #32]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa01 f303 	lsl.w	r3, r1, r3
 800143c:	431a      	orrs	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	f000 80b1 	beq.w	80015b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001450:	4b4d      	ldr	r3, [pc, #308]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001452:	699b      	ldr	r3, [r3, #24]
 8001454:	4a4c      	ldr	r2, [pc, #304]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6193      	str	r3, [r2, #24]
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <HAL_GPIO_Init+0x2b8>)
 800145e:	699b      	ldr	r3, [r3, #24]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001468:	4a48      	ldr	r2, [pc, #288]	; (800158c <HAL_GPIO_Init+0x2bc>)
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	089b      	lsrs	r3, r3, #2
 800146e:	3302      	adds	r3, #2
 8001470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001474:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	220f      	movs	r2, #15
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	68fa      	ldr	r2, [r7, #12]
 8001488:	4013      	ands	r3, r2
 800148a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a40      	ldr	r2, [pc, #256]	; (8001590 <HAL_GPIO_Init+0x2c0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1ec>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3f      	ldr	r2, [pc, #252]	; (8001594 <HAL_GPIO_Init+0x2c4>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1e8>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a3e      	ldr	r2, [pc, #248]	; (8001598 <HAL_GPIO_Init+0x2c8>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1e4>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a3d      	ldr	r2, [pc, #244]	; (800159c <HAL_GPIO_Init+0x2cc>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1e0>
 80014ac:	2303      	movs	r3, #3
 80014ae:	e006      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b0:	2304      	movs	r3, #4
 80014b2:	e004      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b4:	2302      	movs	r3, #2
 80014b6:	e002      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <HAL_GPIO_Init+0x1ee>
 80014bc:	2300      	movs	r3, #0
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	f002 0203 	and.w	r2, r2, #3
 80014c4:	0092      	lsls	r2, r2, #2
 80014c6:	4093      	lsls	r3, r2
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80014ce:	492f      	ldr	r1, [pc, #188]	; (800158c <HAL_GPIO_Init+0x2bc>)
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	3302      	adds	r3, #2
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d006      	beq.n	80014f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014e8:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	492c      	ldr	r1, [pc, #176]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	600b      	str	r3, [r1, #0]
 80014f4:	e006      	b.n	8001504 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014f6:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	43db      	mvns	r3, r3
 80014fe:	4928      	ldr	r1, [pc, #160]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001500:	4013      	ands	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d006      	beq.n	800151e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001510:	4b23      	ldr	r3, [pc, #140]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4922      	ldr	r1, [pc, #136]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
 800151c:	e006      	b.n	800152c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800151e:	4b20      	ldr	r3, [pc, #128]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	43db      	mvns	r3, r3
 8001526:	491e      	ldr	r1, [pc, #120]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001528:	4013      	ands	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001538:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	4918      	ldr	r1, [pc, #96]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001548:	689a      	ldr	r2, [r3, #8]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4914      	ldr	r1, [pc, #80]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d021      	beq.n	80015a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	490e      	ldr	r1, [pc, #56]	; (80015a0 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	60cb      	str	r3, [r1, #12]
 800156c:	e021      	b.n	80015b2 <HAL_GPIO_Init+0x2e2>
 800156e:	bf00      	nop
 8001570:	10320000 	.word	0x10320000
 8001574:	10310000 	.word	0x10310000
 8001578:	10220000 	.word	0x10220000
 800157c:	10210000 	.word	0x10210000
 8001580:	10120000 	.word	0x10120000
 8001584:	10110000 	.word	0x10110000
 8001588:	40021000 	.word	0x40021000
 800158c:	40010000 	.word	0x40010000
 8001590:	40010800 	.word	0x40010800
 8001594:	40010c00 	.word	0x40010c00
 8001598:	40011000 	.word	0x40011000
 800159c:	40011400 	.word	0x40011400
 80015a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	4909      	ldr	r1, [pc, #36]	; (80015d4 <HAL_GPIO_Init+0x304>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	3301      	adds	r3, #1
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015be:	fa22 f303 	lsr.w	r3, r2, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f47f ae8e 	bne.w	80012e4 <HAL_GPIO_Init+0x14>
  }
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	372c      	adds	r7, #44	; 0x2c
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015e8:	787b      	ldrb	r3, [r7, #1]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d003      	beq.n	80015f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80015f4:	e003      	b.n	80015fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80015f6:	887b      	ldrh	r3, [r7, #2]
 80015f8:	041a      	lsls	r2, r3, #16
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	611a      	str	r2, [r3, #16]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e272      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 8087 	beq.w	8001736 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001628:	4b92      	ldr	r3, [pc, #584]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	2b04      	cmp	r3, #4
 8001632:	d00c      	beq.n	800164e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001634:	4b8f      	ldr	r3, [pc, #572]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b08      	cmp	r3, #8
 800163e:	d112      	bne.n	8001666 <HAL_RCC_OscConfig+0x5e>
 8001640:	4b8c      	ldr	r3, [pc, #560]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800164c:	d10b      	bne.n	8001666 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164e:	4b89      	ldr	r3, [pc, #548]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d06c      	beq.n	8001734 <HAL_RCC_OscConfig+0x12c>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d168      	bne.n	8001734 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e24c      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166e:	d106      	bne.n	800167e <HAL_RCC_OscConfig+0x76>
 8001670:	4b80      	ldr	r3, [pc, #512]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a7f      	ldr	r2, [pc, #508]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e02e      	b.n	80016dc <HAL_RCC_OscConfig+0xd4>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d10c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x98>
 8001686:	4b7b      	ldr	r3, [pc, #492]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a7a      	ldr	r2, [pc, #488]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 800168c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b78      	ldr	r3, [pc, #480]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a77      	ldr	r2, [pc, #476]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	e01d      	b.n	80016dc <HAL_RCC_OscConfig+0xd4>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016a8:	d10c      	bne.n	80016c4 <HAL_RCC_OscConfig+0xbc>
 80016aa:	4b72      	ldr	r3, [pc, #456]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a71      	ldr	r2, [pc, #452]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016b4:	6013      	str	r3, [r2, #0]
 80016b6:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a6e      	ldr	r2, [pc, #440]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e00b      	b.n	80016dc <HAL_RCC_OscConfig+0xd4>
 80016c4:	4b6b      	ldr	r3, [pc, #428]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a6a      	ldr	r2, [pc, #424]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ce:	6013      	str	r3, [r2, #0]
 80016d0:	4b68      	ldr	r3, [pc, #416]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a67      	ldr	r2, [pc, #412]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80016d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016da:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d013      	beq.n	800170c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e4:	f7ff fad0 	bl	8000c88 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff facc 	bl	8000c88 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	; 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e200      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0xe4>
 800170a:	e014      	b.n	8001736 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fabc 	bl	8000c88 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001714:	f7ff fab8 	bl	8000c88 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b64      	cmp	r3, #100	; 0x64
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e1ec      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001726:	4b53      	ldr	r3, [pc, #332]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x10c>
 8001732:	e000      	b.n	8001736 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d063      	beq.n	800180a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001742:	4b4c      	ldr	r3, [pc, #304]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 030c 	and.w	r3, r3, #12
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800174e:	4b49      	ldr	r3, [pc, #292]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b08      	cmp	r3, #8
 8001758:	d11c      	bne.n	8001794 <HAL_RCC_OscConfig+0x18c>
 800175a:	4b46      	ldr	r3, [pc, #280]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x176>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e1c0      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4939      	ldr	r1, [pc, #228]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	e03a      	b.n	800180a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b36      	ldr	r3, [pc, #216]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a2:	f7ff fa71 	bl	8000c88 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff fa6d 	bl	8000c88 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1a1      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4927      	ldr	r1, [pc, #156]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b26      	ldr	r3, [pc, #152]	; (8001878 <HAL_RCC_OscConfig+0x270>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fa50 	bl	8000c88 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff fa4c 	bl	8000c88 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e180      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d03a      	beq.n	800188c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	699b      	ldr	r3, [r3, #24]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d019      	beq.n	8001852 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff fa30 	bl	8000c88 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fa2c 	bl	8000c88 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e160      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	4b0d      	ldr	r3, [pc, #52]	; (8001874 <HAL_RCC_OscConfig+0x26c>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800184a:	2001      	movs	r0, #1
 800184c:	f000 faa6 	bl	8001d9c <RCC_Delay>
 8001850:	e01c      	b.n	800188c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_RCC_OscConfig+0x274>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7ff fa16 	bl	8000c88 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800185e:	e00f      	b.n	8001880 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001860:	f7ff fa12 	bl	8000c88 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d908      	bls.n	8001880 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e146      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	42420000 	.word	0x42420000
 800187c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001880:	4b92      	ldr	r3, [pc, #584]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e9      	bne.n	8001860 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80a6 	beq.w	80019e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b8b      	ldr	r3, [pc, #556]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80018a0:	69db      	ldr	r3, [r3, #28]
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10d      	bne.n	80018c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b88      	ldr	r3, [pc, #544]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	4a87      	ldr	r2, [pc, #540]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	61d3      	str	r3, [r2, #28]
 80018b6:	4b85      	ldr	r3, [pc, #532]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	4b82      	ldr	r3, [pc, #520]	; (8001ad0 <HAL_RCC_OscConfig+0x4c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d2:	4b7f      	ldr	r3, [pc, #508]	; (8001ad0 <HAL_RCC_OscConfig+0x4c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a7e      	ldr	r2, [pc, #504]	; (8001ad0 <HAL_RCC_OscConfig+0x4c8>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff f9d3 	bl	8000c88 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7ff f9cf 	bl	8000c88 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e103      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	4b75      	ldr	r3, [pc, #468]	; (8001ad0 <HAL_RCC_OscConfig+0x4c8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x312>
 800190c:	4b6f      	ldr	r3, [pc, #444]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	4a6e      	ldr	r2, [pc, #440]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001912:	f043 0301 	orr.w	r3, r3, #1
 8001916:	6213      	str	r3, [r2, #32]
 8001918:	e02d      	b.n	8001976 <HAL_RCC_OscConfig+0x36e>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x334>
 8001922:	4b6a      	ldr	r3, [pc, #424]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4a69      	ldr	r2, [pc, #420]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001928:	f023 0301 	bic.w	r3, r3, #1
 800192c:	6213      	str	r3, [r2, #32]
 800192e:	4b67      	ldr	r3, [pc, #412]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	4a66      	ldr	r2, [pc, #408]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001934:	f023 0304 	bic.w	r3, r3, #4
 8001938:	6213      	str	r3, [r2, #32]
 800193a:	e01c      	b.n	8001976 <HAL_RCC_OscConfig+0x36e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x356>
 8001944:	4b61      	ldr	r3, [pc, #388]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4a60      	ldr	r2, [pc, #384]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 800194a:	f043 0304 	orr.w	r3, r3, #4
 800194e:	6213      	str	r3, [r2, #32]
 8001950:	4b5e      	ldr	r3, [pc, #376]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4a5d      	ldr	r2, [pc, #372]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	6213      	str	r3, [r2, #32]
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x36e>
 800195e:	4b5b      	ldr	r3, [pc, #364]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001960:	6a1b      	ldr	r3, [r3, #32]
 8001962:	4a5a      	ldr	r2, [pc, #360]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001964:	f023 0301 	bic.w	r3, r3, #1
 8001968:	6213      	str	r3, [r2, #32]
 800196a:	4b58      	ldr	r3, [pc, #352]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 800196c:	6a1b      	ldr	r3, [r3, #32]
 800196e:	4a57      	ldr	r2, [pc, #348]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f023 0304 	bic.w	r3, r3, #4
 8001974:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	68db      	ldr	r3, [r3, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d015      	beq.n	80019aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff f983 	bl	8000c88 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001984:	e00a      	b.n	800199c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f7ff f97f 	bl	8000c88 <HAL_GetTick>
 800198a:	4602      	mov	r2, r0
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	f241 3288 	movw	r2, #5000	; 0x1388
 8001994:	4293      	cmp	r3, r2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0b1      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199c:	4b4b      	ldr	r3, [pc, #300]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d0ee      	beq.n	8001986 <HAL_RCC_OscConfig+0x37e>
 80019a8:	e014      	b.n	80019d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019aa:	f7ff f96d 	bl	8000c88 <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019b0:	e00a      	b.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019b2:	f7ff f969 	bl	8000c88 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e09b      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c8:	4b40      	ldr	r3, [pc, #256]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1ee      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019d4:	7dfb      	ldrb	r3, [r7, #23]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d105      	bne.n	80019e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80019dc:	69db      	ldr	r3, [r3, #28]
 80019de:	4a3b      	ldr	r2, [pc, #236]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80019e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	f000 8087 	beq.w	8001afe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 030c 	and.w	r3, r3, #12
 80019f8:	2b08      	cmp	r3, #8
 80019fa:	d061      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d146      	bne.n	8001a92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <HAL_RCC_OscConfig+0x4cc>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f93d 	bl	8000c88 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f939 	bl	8000c88 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e06d      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d108      	bne.n	8001a4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a3a:	4b24      	ldr	r3, [pc, #144]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	4921      	ldr	r1, [pc, #132]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a19      	ldr	r1, [r3, #32]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	491b      	ldr	r1, [pc, #108]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_RCC_OscConfig+0x4cc>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff f90d 	bl	8000c88 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff f909 	bl	8000c88 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e03d      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a84:	4b11      	ldr	r3, [pc, #68]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x46a>
 8001a90:	e035      	b.n	8001afe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <HAL_RCC_OscConfig+0x4cc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff f8f6 	bl	8000c88 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff f8f2 	bl	8000c88 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e026      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_RCC_OscConfig+0x4c4>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x498>
 8001abe:	e01e      	b.n	8001afe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d107      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e019      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40007000 	.word	0x40007000
 8001ad4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_RCC_OscConfig+0x500>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a1b      	ldr	r3, [r3, #32]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	40021000 	.word	0x40021000

08001b0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
 8001b14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0d0      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b20:	4b6a      	ldr	r3, [pc, #424]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d910      	bls.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2e:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 0207 	bic.w	r2, r3, #7
 8001b36:	4965      	ldr	r1, [pc, #404]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3e:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d001      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	e0b8      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d020      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d005      	beq.n	8001b74 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b72:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d005      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b86:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001b8a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	494d      	ldr	r1, [pc, #308]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d040      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d107      	bne.n	8001bc2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb2:	4b47      	ldr	r3, [pc, #284]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d115      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e07f      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b02      	cmp	r3, #2
 8001bc8:	d107      	bne.n	8001bda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bca:	4b41      	ldr	r3, [pc, #260]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d109      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e073      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e06b      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bea:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f023 0203 	bic.w	r2, r3, #3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	4936      	ldr	r1, [pc, #216]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfc:	f7ff f844 	bl	8000c88 <HAL_GetTick>
 8001c00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c02:	e00a      	b.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c04:	f7ff f840 	bl	8000c88 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e053      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 020c 	and.w	r2, r3, #12
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d1eb      	bne.n	8001c04 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2c:	4b27      	ldr	r3, [pc, #156]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d210      	bcs.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f023 0207 	bic.w	r2, r3, #7
 8001c42:	4922      	ldr	r1, [pc, #136]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c4a:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <HAL_RCC_ClockConfig+0x1c0>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d001      	beq.n	8001c5c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e032      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d008      	beq.n	8001c7a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c68:	4b19      	ldr	r3, [pc, #100]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4916      	ldr	r1, [pc, #88]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c76:	4313      	orrs	r3, r2
 8001c78:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d009      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c86:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	490e      	ldr	r1, [pc, #56]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c9a:	f000 f821 	bl	8001ce0 <HAL_RCC_GetSysClockFreq>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	490a      	ldr	r1, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x1c8>)
 8001cac:	5ccb      	ldrb	r3, [r1, r3]
 8001cae:	fa22 f303 	lsr.w	r3, r2, r3
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_ClockConfig+0x1d0>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe ffa2 	bl	8000c04 <HAL_InitTick>

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08004c54 	.word	0x08004c54
 8001cd8:	20000000 	.word	0x20000000
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ce0:	b490      	push	{r4, r7}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001ce6:	4b29      	ldr	r3, [pc, #164]	; (8001d8c <HAL_RCC_GetSysClockFreq+0xac>)
 8001ce8:	1d3c      	adds	r4, r7, #4
 8001cea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001cf0:	f240 2301 	movw	r3, #513	; 0x201
 8001cf4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d002      	beq.n	8001d20 <HAL_RCC_GetSysClockFreq+0x40>
 8001d1a:	2b08      	cmp	r3, #8
 8001d1c:	d003      	beq.n	8001d26 <HAL_RCC_GetSysClockFreq+0x46>
 8001d1e:	e02b      	b.n	8001d78 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d20:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d22:	623b      	str	r3, [r7, #32]
      break;
 8001d24:	e02b      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	0c9b      	lsrs	r3, r3, #18
 8001d2a:	f003 030f 	and.w	r3, r3, #15
 8001d2e:	3328      	adds	r3, #40	; 0x28
 8001d30:	443b      	add	r3, r7
 8001d32:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d36:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d012      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d42:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	0c5b      	lsrs	r3, r3, #17
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	3328      	adds	r3, #40	; 0x28
 8001d4e:	443b      	add	r3, r7
 8001d50:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d54:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	4a0e      	ldr	r2, [pc, #56]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d5a:	fb03 f202 	mul.w	r2, r3, r2
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
 8001d66:	e004      	b.n	8001d72 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d6c:	fb02 f303 	mul.w	r3, r2, r3
 8001d70:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	623b      	str	r3, [r7, #32]
      break;
 8001d76:	e002      	b.n	8001d7e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d78:	4b06      	ldr	r3, [pc, #24]	; (8001d94 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d7a:	623b      	str	r3, [r7, #32]
      break;
 8001d7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3728      	adds	r7, #40	; 0x28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc90      	pop	{r4, r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	08003584 	.word	0x08003584
 8001d90:	40021000 	.word	0x40021000
 8001d94:	007a1200 	.word	0x007a1200
 8001d98:	003d0900 	.word	0x003d0900

08001d9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001da4:	4b0a      	ldr	r3, [pc, #40]	; (8001dd0 <RCC_Delay+0x34>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0a      	ldr	r2, [pc, #40]	; (8001dd4 <RCC_Delay+0x38>)
 8001daa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dae:	0a5b      	lsrs	r3, r3, #9
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	fb02 f303 	mul.w	r3, r2, r3
 8001db6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001db8:	bf00      	nop
  }
  while (Delay --);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1e5a      	subs	r2, r3, #1
 8001dbe:	60fa      	str	r2, [r7, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f9      	bne.n	8001db8 <RCC_Delay+0x1c>
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000000 	.word	0x20000000
 8001dd4:	10624dd3 	.word	0x10624dd3

08001dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	2300      	movs	r3, #0
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d07d      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001dfa:	69db      	ldr	r3, [r3, #28]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d10d      	bne.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	4b4c      	ldr	r3, [pc, #304]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4a4b      	ldr	r2, [pc, #300]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	61d3      	str	r3, [r2, #28]
 8001e10:	4b49      	ldr	r3, [pc, #292]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e18:	60bb      	str	r3, [r7, #8]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e20:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d118      	bne.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e38:	f7fe ff26 	bl	8000c88 <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e3e:	e008      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e40:	f7fe ff22 	bl	8000c88 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b64      	cmp	r3, #100	; 0x64
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e06d      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e5e:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e66:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d02e      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e76:	68fa      	ldr	r2, [r7, #12]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d027      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e7c:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e84:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e88:	2201      	movs	r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8c:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001e92:	4a29      	ldr	r2, [pc, #164]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d014      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea2:	f7fe fef1 	bl	8000c88 <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eaa:	f7fe feed 	bl	8000c88 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e036      	b.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d0ee      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4917      	ldr	r1, [pc, #92]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eee:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0302 	and.w	r3, r3, #2
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d008      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	490b      	ldr	r1, [pc, #44]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0310 	and.w	r3, r3, #16
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d008      	beq.n	8001f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	4904      	ldr	r1, [pc, #16]	; (8001f38 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40007000 	.word	0x40007000
 8001f40:	42420440 	.word	0x42420440

08001f44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e076      	b.n	8002044 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d108      	bne.n	8001f70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f66:	d009      	beq.n	8001f7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	61da      	str	r2, [r3, #28]
 8001f6e:	e005      	b.n	8001f7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d106      	bne.n	8001f9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7fe fcb8 	bl	800090c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a1b      	ldr	r3, [r3, #32]
 8001ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002000:	ea42 0103 	orr.w	r1, r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002008:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	0c1a      	lsrs	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f002 0204 	and.w	r2, r2, #4
 8002022:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69da      	ldr	r2, [r3, #28]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002032:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b088      	sub	sp, #32
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002066:	2b01      	cmp	r3, #1
 8002068:	d101      	bne.n	800206e <HAL_SPI_Transmit+0x22>
 800206a:	2302      	movs	r3, #2
 800206c:	e126      	b.n	80022bc <HAL_SPI_Transmit+0x270>
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002076:	f7fe fe07 	bl	8000c88 <HAL_GetTick>
 800207a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b01      	cmp	r3, #1
 800208a:	d002      	beq.n	8002092 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800208c:	2302      	movs	r3, #2
 800208e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002090:	e10b      	b.n	80022aa <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <HAL_SPI_Transmit+0x52>
 8002098:	88fb      	ldrh	r3, [r7, #6]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80020a2:	e102      	b.n	80022aa <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2203      	movs	r2, #3
 80020a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2200      	movs	r2, #0
 80020ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2200      	movs	r2, #0
 80020da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020ea:	d10f      	bne.n	800210c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800210a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002116:	2b40      	cmp	r3, #64	; 0x40
 8002118:	d007      	beq.n	800212a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002128:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002132:	d14b      	bne.n	80021cc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_SPI_Transmit+0xf6>
 800213c:	8afb      	ldrh	r3, [r7, #22]
 800213e:	2b01      	cmp	r3, #1
 8002140:	d13e      	bne.n	80021c0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	881a      	ldrh	r2, [r3, #0]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	1c9a      	adds	r2, r3, #2
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800215c:	b29b      	uxth	r3, r3
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002166:	e02b      	b.n	80021c0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b02      	cmp	r3, #2
 8002174:	d112      	bne.n	800219c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	1c9a      	adds	r2, r3, #2
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	86da      	strh	r2, [r3, #54]	; 0x36
 800219a:	e011      	b.n	80021c0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800219c:	f7fe fd74 	bl	8000c88 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d803      	bhi.n	80021b4 <HAL_SPI_Transmit+0x168>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021b2:	d102      	bne.n	80021ba <HAL_SPI_Transmit+0x16e>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d102      	bne.n	80021c0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80021be:	e074      	b.n	80022aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ce      	bne.n	8002168 <HAL_SPI_Transmit+0x11c>
 80021ca:	e04c      	b.n	8002266 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d002      	beq.n	80021da <HAL_SPI_Transmit+0x18e>
 80021d4:	8afb      	ldrh	r3, [r7, #22]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d140      	bne.n	800225c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	330c      	adds	r3, #12
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002200:	e02c      	b.n	800225c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b02      	cmp	r3, #2
 800220e:	d113      	bne.n	8002238 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	330c      	adds	r3, #12
 800221a:	7812      	ldrb	r2, [r2, #0]
 800221c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
 8002236:	e011      	b.n	800225c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002238:	f7fe fd26 	bl	8000c88 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d803      	bhi.n	8002250 <HAL_SPI_Transmit+0x204>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800224e:	d102      	bne.n	8002256 <HAL_SPI_Transmit+0x20a>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d102      	bne.n	800225c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	77fb      	strb	r3, [r7, #31]
          goto error;
 800225a:	e026      	b.n	80022aa <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1cd      	bne.n	8002202 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	6839      	ldr	r1, [r7, #0]
 800226a:	68f8      	ldr	r0, [r7, #12]
 800226c:	f000 f8b2 	bl	80023d4 <SPI_EndRxTxTransaction>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	2220      	movs	r2, #32
 800227a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10a      	bne.n	800229a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	613b      	str	r3, [r7, #16]
 8002298:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d002      	beq.n	80022a8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	77fb      	strb	r3, [r7, #31]
 80022a6:	e000      	b.n	80022aa <HAL_SPI_Transmit+0x25e>
  }

error:
 80022a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3720      	adds	r7, #32
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80022d4:	f7fe fcd8 	bl	8000c88 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	4413      	add	r3, r2
 80022e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80022e4:	f7fe fcd0 	bl	8000c88 <HAL_GetTick>
 80022e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80022ea:	4b39      	ldr	r3, [pc, #228]	; (80023d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	015b      	lsls	r3, r3, #5
 80022f0:	0d1b      	lsrs	r3, r3, #20
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	fb02 f303 	mul.w	r3, r2, r3
 80022f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022fa:	e054      	b.n	80023a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002302:	d050      	beq.n	80023a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002304:	f7fe fcc0 	bl	8000c88 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	69fa      	ldr	r2, [r7, #28]
 8002310:	429a      	cmp	r2, r3
 8002312:	d902      	bls.n	800231a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d13d      	bne.n	8002396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002332:	d111      	bne.n	8002358 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800233c:	d004      	beq.n	8002348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002346:	d107      	bne.n	8002358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002360:	d10f      	bne.n	8002382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e017      	b.n	80023c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689a      	ldr	r2, [r3, #8]
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	4013      	ands	r3, r2
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	bf0c      	ite	eq
 80023b6:	2301      	moveq	r3, #1
 80023b8:	2300      	movne	r3, #0
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	79fb      	ldrb	r3, [r7, #7]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d19b      	bne.n	80022fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af02      	add	r7, sp, #8
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2200      	movs	r2, #0
 80023e8:	2180      	movs	r1, #128	; 0x80
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f7ff ff6a 	bl	80022c4 <SPI_WaitFlagStateUntilTimeout>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023fa:	f043 0220 	orr.w	r2, r3, #32
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e000      	b.n	8002408 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <calloc>:
 8002410:	4b02      	ldr	r3, [pc, #8]	; (800241c <calloc+0xc>)
 8002412:	460a      	mov	r2, r1
 8002414:	4601      	mov	r1, r0
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	f000 b834 	b.w	8002484 <_calloc_r>
 800241c:	2000000c 	.word	0x2000000c

08002420 <__errno>:
 8002420:	4b01      	ldr	r3, [pc, #4]	; (8002428 <__errno+0x8>)
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	2000000c 	.word	0x2000000c

0800242c <__libc_init_array>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	2600      	movs	r6, #0
 8002430:	4d0c      	ldr	r5, [pc, #48]	; (8002464 <__libc_init_array+0x38>)
 8002432:	4c0d      	ldr	r4, [pc, #52]	; (8002468 <__libc_init_array+0x3c>)
 8002434:	1b64      	subs	r4, r4, r5
 8002436:	10a4      	asrs	r4, r4, #2
 8002438:	42a6      	cmp	r6, r4
 800243a:	d109      	bne.n	8002450 <__libc_init_array+0x24>
 800243c:	f001 f896 	bl	800356c <_init>
 8002440:	2600      	movs	r6, #0
 8002442:	4d0a      	ldr	r5, [pc, #40]	; (800246c <__libc_init_array+0x40>)
 8002444:	4c0a      	ldr	r4, [pc, #40]	; (8002470 <__libc_init_array+0x44>)
 8002446:	1b64      	subs	r4, r4, r5
 8002448:	10a4      	asrs	r4, r4, #2
 800244a:	42a6      	cmp	r6, r4
 800244c:	d105      	bne.n	800245a <__libc_init_array+0x2e>
 800244e:	bd70      	pop	{r4, r5, r6, pc}
 8002450:	f855 3b04 	ldr.w	r3, [r5], #4
 8002454:	4798      	blx	r3
 8002456:	3601      	adds	r6, #1
 8002458:	e7ee      	b.n	8002438 <__libc_init_array+0xc>
 800245a:	f855 3b04 	ldr.w	r3, [r5], #4
 800245e:	4798      	blx	r3
 8002460:	3601      	adds	r6, #1
 8002462:	e7f2      	b.n	800244a <__libc_init_array+0x1e>
 8002464:	08004d98 	.word	0x08004d98
 8002468:	08004d98 	.word	0x08004d98
 800246c:	08004d98 	.word	0x08004d98
 8002470:	08004d9c 	.word	0x08004d9c

08002474 <memset>:
 8002474:	4603      	mov	r3, r0
 8002476:	4402      	add	r2, r0
 8002478:	4293      	cmp	r3, r2
 800247a:	d100      	bne.n	800247e <memset+0xa>
 800247c:	4770      	bx	lr
 800247e:	f803 1b01 	strb.w	r1, [r3], #1
 8002482:	e7f9      	b.n	8002478 <memset+0x4>

08002484 <_calloc_r>:
 8002484:	b570      	push	{r4, r5, r6, lr}
 8002486:	fba1 5402 	umull	r5, r4, r1, r2
 800248a:	b934      	cbnz	r4, 800249a <_calloc_r+0x16>
 800248c:	4629      	mov	r1, r5
 800248e:	f000 f82d 	bl	80024ec <_malloc_r>
 8002492:	4606      	mov	r6, r0
 8002494:	b928      	cbnz	r0, 80024a2 <_calloc_r+0x1e>
 8002496:	4630      	mov	r0, r6
 8002498:	bd70      	pop	{r4, r5, r6, pc}
 800249a:	220c      	movs	r2, #12
 800249c:	2600      	movs	r6, #0
 800249e:	6002      	str	r2, [r0, #0]
 80024a0:	e7f9      	b.n	8002496 <_calloc_r+0x12>
 80024a2:	462a      	mov	r2, r5
 80024a4:	4621      	mov	r1, r4
 80024a6:	f7ff ffe5 	bl	8002474 <memset>
 80024aa:	e7f4      	b.n	8002496 <_calloc_r+0x12>

080024ac <sbrk_aligned>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	4e0e      	ldr	r6, [pc, #56]	; (80024e8 <sbrk_aligned+0x3c>)
 80024b0:	460c      	mov	r4, r1
 80024b2:	6831      	ldr	r1, [r6, #0]
 80024b4:	4605      	mov	r5, r0
 80024b6:	b911      	cbnz	r1, 80024be <sbrk_aligned+0x12>
 80024b8:	f000 f8ca 	bl	8002650 <_sbrk_r>
 80024bc:	6030      	str	r0, [r6, #0]
 80024be:	4621      	mov	r1, r4
 80024c0:	4628      	mov	r0, r5
 80024c2:	f000 f8c5 	bl	8002650 <_sbrk_r>
 80024c6:	1c43      	adds	r3, r0, #1
 80024c8:	d00a      	beq.n	80024e0 <sbrk_aligned+0x34>
 80024ca:	1cc4      	adds	r4, r0, #3
 80024cc:	f024 0403 	bic.w	r4, r4, #3
 80024d0:	42a0      	cmp	r0, r4
 80024d2:	d007      	beq.n	80024e4 <sbrk_aligned+0x38>
 80024d4:	1a21      	subs	r1, r4, r0
 80024d6:	4628      	mov	r0, r5
 80024d8:	f000 f8ba 	bl	8002650 <_sbrk_r>
 80024dc:	3001      	adds	r0, #1
 80024de:	d101      	bne.n	80024e4 <sbrk_aligned+0x38>
 80024e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024e4:	4620      	mov	r0, r4
 80024e6:	bd70      	pop	{r4, r5, r6, pc}
 80024e8:	200004a0 	.word	0x200004a0

080024ec <_malloc_r>:
 80024ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024f0:	1ccd      	adds	r5, r1, #3
 80024f2:	f025 0503 	bic.w	r5, r5, #3
 80024f6:	3508      	adds	r5, #8
 80024f8:	2d0c      	cmp	r5, #12
 80024fa:	bf38      	it	cc
 80024fc:	250c      	movcc	r5, #12
 80024fe:	2d00      	cmp	r5, #0
 8002500:	4607      	mov	r7, r0
 8002502:	db01      	blt.n	8002508 <_malloc_r+0x1c>
 8002504:	42a9      	cmp	r1, r5
 8002506:	d905      	bls.n	8002514 <_malloc_r+0x28>
 8002508:	230c      	movs	r3, #12
 800250a:	2600      	movs	r6, #0
 800250c:	603b      	str	r3, [r7, #0]
 800250e:	4630      	mov	r0, r6
 8002510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002514:	4e2e      	ldr	r6, [pc, #184]	; (80025d0 <_malloc_r+0xe4>)
 8002516:	f000 f90d 	bl	8002734 <__malloc_lock>
 800251a:	6833      	ldr	r3, [r6, #0]
 800251c:	461c      	mov	r4, r3
 800251e:	bb34      	cbnz	r4, 800256e <_malloc_r+0x82>
 8002520:	4629      	mov	r1, r5
 8002522:	4638      	mov	r0, r7
 8002524:	f7ff ffc2 	bl	80024ac <sbrk_aligned>
 8002528:	1c43      	adds	r3, r0, #1
 800252a:	4604      	mov	r4, r0
 800252c:	d14d      	bne.n	80025ca <_malloc_r+0xde>
 800252e:	6834      	ldr	r4, [r6, #0]
 8002530:	4626      	mov	r6, r4
 8002532:	2e00      	cmp	r6, #0
 8002534:	d140      	bne.n	80025b8 <_malloc_r+0xcc>
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	4631      	mov	r1, r6
 800253a:	4638      	mov	r0, r7
 800253c:	eb04 0803 	add.w	r8, r4, r3
 8002540:	f000 f886 	bl	8002650 <_sbrk_r>
 8002544:	4580      	cmp	r8, r0
 8002546:	d13a      	bne.n	80025be <_malloc_r+0xd2>
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	3503      	adds	r5, #3
 800254c:	1aed      	subs	r5, r5, r3
 800254e:	f025 0503 	bic.w	r5, r5, #3
 8002552:	3508      	adds	r5, #8
 8002554:	2d0c      	cmp	r5, #12
 8002556:	bf38      	it	cc
 8002558:	250c      	movcc	r5, #12
 800255a:	4638      	mov	r0, r7
 800255c:	4629      	mov	r1, r5
 800255e:	f7ff ffa5 	bl	80024ac <sbrk_aligned>
 8002562:	3001      	adds	r0, #1
 8002564:	d02b      	beq.n	80025be <_malloc_r+0xd2>
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	442b      	add	r3, r5
 800256a:	6023      	str	r3, [r4, #0]
 800256c:	e00e      	b.n	800258c <_malloc_r+0xa0>
 800256e:	6822      	ldr	r2, [r4, #0]
 8002570:	1b52      	subs	r2, r2, r5
 8002572:	d41e      	bmi.n	80025b2 <_malloc_r+0xc6>
 8002574:	2a0b      	cmp	r2, #11
 8002576:	d916      	bls.n	80025a6 <_malloc_r+0xba>
 8002578:	1961      	adds	r1, r4, r5
 800257a:	42a3      	cmp	r3, r4
 800257c:	6025      	str	r5, [r4, #0]
 800257e:	bf18      	it	ne
 8002580:	6059      	strne	r1, [r3, #4]
 8002582:	6863      	ldr	r3, [r4, #4]
 8002584:	bf08      	it	eq
 8002586:	6031      	streq	r1, [r6, #0]
 8002588:	5162      	str	r2, [r4, r5]
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	4638      	mov	r0, r7
 800258e:	f104 060b 	add.w	r6, r4, #11
 8002592:	f000 f8d5 	bl	8002740 <__malloc_unlock>
 8002596:	f026 0607 	bic.w	r6, r6, #7
 800259a:	1d23      	adds	r3, r4, #4
 800259c:	1af2      	subs	r2, r6, r3
 800259e:	d0b6      	beq.n	800250e <_malloc_r+0x22>
 80025a0:	1b9b      	subs	r3, r3, r6
 80025a2:	50a3      	str	r3, [r4, r2]
 80025a4:	e7b3      	b.n	800250e <_malloc_r+0x22>
 80025a6:	6862      	ldr	r2, [r4, #4]
 80025a8:	42a3      	cmp	r3, r4
 80025aa:	bf0c      	ite	eq
 80025ac:	6032      	streq	r2, [r6, #0]
 80025ae:	605a      	strne	r2, [r3, #4]
 80025b0:	e7ec      	b.n	800258c <_malloc_r+0xa0>
 80025b2:	4623      	mov	r3, r4
 80025b4:	6864      	ldr	r4, [r4, #4]
 80025b6:	e7b2      	b.n	800251e <_malloc_r+0x32>
 80025b8:	4634      	mov	r4, r6
 80025ba:	6876      	ldr	r6, [r6, #4]
 80025bc:	e7b9      	b.n	8002532 <_malloc_r+0x46>
 80025be:	230c      	movs	r3, #12
 80025c0:	4638      	mov	r0, r7
 80025c2:	603b      	str	r3, [r7, #0]
 80025c4:	f000 f8bc 	bl	8002740 <__malloc_unlock>
 80025c8:	e7a1      	b.n	800250e <_malloc_r+0x22>
 80025ca:	6025      	str	r5, [r4, #0]
 80025cc:	e7de      	b.n	800258c <_malloc_r+0xa0>
 80025ce:	bf00      	nop
 80025d0:	2000049c 	.word	0x2000049c

080025d4 <rand>:
 80025d4:	4b16      	ldr	r3, [pc, #88]	; (8002630 <rand+0x5c>)
 80025d6:	b510      	push	{r4, lr}
 80025d8:	681c      	ldr	r4, [r3, #0]
 80025da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025dc:	b9b3      	cbnz	r3, 800260c <rand+0x38>
 80025de:	2018      	movs	r0, #24
 80025e0:	f000 f8a0 	bl	8002724 <malloc>
 80025e4:	4602      	mov	r2, r0
 80025e6:	63a0      	str	r0, [r4, #56]	; 0x38
 80025e8:	b920      	cbnz	r0, 80025f4 <rand+0x20>
 80025ea:	214e      	movs	r1, #78	; 0x4e
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <rand+0x60>)
 80025ee:	4812      	ldr	r0, [pc, #72]	; (8002638 <rand+0x64>)
 80025f0:	f000 f864 	bl	80026bc <__assert_func>
 80025f4:	4911      	ldr	r1, [pc, #68]	; (800263c <rand+0x68>)
 80025f6:	4b12      	ldr	r3, [pc, #72]	; (8002640 <rand+0x6c>)
 80025f8:	e9c0 1300 	strd	r1, r3, [r0]
 80025fc:	4b11      	ldr	r3, [pc, #68]	; (8002644 <rand+0x70>)
 80025fe:	2100      	movs	r1, #0
 8002600:	6083      	str	r3, [r0, #8]
 8002602:	230b      	movs	r3, #11
 8002604:	8183      	strh	r3, [r0, #12]
 8002606:	2001      	movs	r0, #1
 8002608:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800260c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800260e:	480e      	ldr	r0, [pc, #56]	; (8002648 <rand+0x74>)
 8002610:	690b      	ldr	r3, [r1, #16]
 8002612:	694c      	ldr	r4, [r1, #20]
 8002614:	4358      	muls	r0, r3
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <rand+0x78>)
 8002618:	fb02 0004 	mla	r0, r2, r4, r0
 800261c:	fba3 3202 	umull	r3, r2, r3, r2
 8002620:	3301      	adds	r3, #1
 8002622:	eb40 0002 	adc.w	r0, r0, r2
 8002626:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800262a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800262e:	bd10      	pop	{r4, pc}
 8002630:	2000000c 	.word	0x2000000c
 8002634:	08004c68 	.word	0x08004c68
 8002638:	08004c7f 	.word	0x08004c7f
 800263c:	abcd330e 	.word	0xabcd330e
 8002640:	e66d1234 	.word	0xe66d1234
 8002644:	0005deec 	.word	0x0005deec
 8002648:	5851f42d 	.word	0x5851f42d
 800264c:	4c957f2d 	.word	0x4c957f2d

08002650 <_sbrk_r>:
 8002650:	b538      	push	{r3, r4, r5, lr}
 8002652:	2300      	movs	r3, #0
 8002654:	4d05      	ldr	r5, [pc, #20]	; (800266c <_sbrk_r+0x1c>)
 8002656:	4604      	mov	r4, r0
 8002658:	4608      	mov	r0, r1
 800265a:	602b      	str	r3, [r5, #0]
 800265c:	f7fe fa5a 	bl	8000b14 <_sbrk>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d102      	bne.n	800266a <_sbrk_r+0x1a>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	b103      	cbz	r3, 800266a <_sbrk_r+0x1a>
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	200004a8 	.word	0x200004a8

08002670 <strncat>:
 8002670:	b530      	push	{r4, r5, lr}
 8002672:	4604      	mov	r4, r0
 8002674:	7825      	ldrb	r5, [r4, #0]
 8002676:	4623      	mov	r3, r4
 8002678:	3401      	adds	r4, #1
 800267a:	2d00      	cmp	r5, #0
 800267c:	d1fa      	bne.n	8002674 <strncat+0x4>
 800267e:	3a01      	subs	r2, #1
 8002680:	d304      	bcc.n	800268c <strncat+0x1c>
 8002682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002686:	f803 4b01 	strb.w	r4, [r3], #1
 800268a:	b904      	cbnz	r4, 800268e <strncat+0x1e>
 800268c:	bd30      	pop	{r4, r5, pc}
 800268e:	2a00      	cmp	r2, #0
 8002690:	d1f5      	bne.n	800267e <strncat+0xe>
 8002692:	701a      	strb	r2, [r3, #0]
 8002694:	e7f3      	b.n	800267e <strncat+0xe>

08002696 <strncpy>:
 8002696:	4603      	mov	r3, r0
 8002698:	b510      	push	{r4, lr}
 800269a:	3901      	subs	r1, #1
 800269c:	b132      	cbz	r2, 80026ac <strncpy+0x16>
 800269e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80026a2:	3a01      	subs	r2, #1
 80026a4:	f803 4b01 	strb.w	r4, [r3], #1
 80026a8:	2c00      	cmp	r4, #0
 80026aa:	d1f7      	bne.n	800269c <strncpy+0x6>
 80026ac:	2100      	movs	r1, #0
 80026ae:	441a      	add	r2, r3
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d100      	bne.n	80026b6 <strncpy+0x20>
 80026b4:	bd10      	pop	{r4, pc}
 80026b6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ba:	e7f9      	b.n	80026b0 <strncpy+0x1a>

080026bc <__assert_func>:
 80026bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80026be:	4614      	mov	r4, r2
 80026c0:	461a      	mov	r2, r3
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <__assert_func+0x2c>)
 80026c4:	4605      	mov	r5, r0
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68d8      	ldr	r0, [r3, #12]
 80026ca:	b14c      	cbz	r4, 80026e0 <__assert_func+0x24>
 80026cc:	4b07      	ldr	r3, [pc, #28]	; (80026ec <__assert_func+0x30>)
 80026ce:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80026d2:	9100      	str	r1, [sp, #0]
 80026d4:	462b      	mov	r3, r5
 80026d6:	4906      	ldr	r1, [pc, #24]	; (80026f0 <__assert_func+0x34>)
 80026d8:	f000 f80e 	bl	80026f8 <fiprintf>
 80026dc:	f000 fa94 	bl	8002c08 <abort>
 80026e0:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <__assert_func+0x38>)
 80026e2:	461c      	mov	r4, r3
 80026e4:	e7f3      	b.n	80026ce <__assert_func+0x12>
 80026e6:	bf00      	nop
 80026e8:	2000000c 	.word	0x2000000c
 80026ec:	08004cc7 	.word	0x08004cc7
 80026f0:	08004cd4 	.word	0x08004cd4
 80026f4:	08004d02 	.word	0x08004d02

080026f8 <fiprintf>:
 80026f8:	b40e      	push	{r1, r2, r3}
 80026fa:	b503      	push	{r0, r1, lr}
 80026fc:	4601      	mov	r1, r0
 80026fe:	ab03      	add	r3, sp, #12
 8002700:	4805      	ldr	r0, [pc, #20]	; (8002718 <fiprintf+0x20>)
 8002702:	f853 2b04 	ldr.w	r2, [r3], #4
 8002706:	6800      	ldr	r0, [r0, #0]
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	f000 f88f 	bl	800282c <_vfiprintf_r>
 800270e:	b002      	add	sp, #8
 8002710:	f85d eb04 	ldr.w	lr, [sp], #4
 8002714:	b003      	add	sp, #12
 8002716:	4770      	bx	lr
 8002718:	2000000c 	.word	0x2000000c

0800271c <__retarget_lock_init_recursive>:
 800271c:	4770      	bx	lr

0800271e <__retarget_lock_acquire_recursive>:
 800271e:	4770      	bx	lr

08002720 <__retarget_lock_release_recursive>:
 8002720:	4770      	bx	lr
	...

08002724 <malloc>:
 8002724:	4b02      	ldr	r3, [pc, #8]	; (8002730 <malloc+0xc>)
 8002726:	4601      	mov	r1, r0
 8002728:	6818      	ldr	r0, [r3, #0]
 800272a:	f7ff bedf 	b.w	80024ec <_malloc_r>
 800272e:	bf00      	nop
 8002730:	2000000c 	.word	0x2000000c

08002734 <__malloc_lock>:
 8002734:	4801      	ldr	r0, [pc, #4]	; (800273c <__malloc_lock+0x8>)
 8002736:	f7ff bff2 	b.w	800271e <__retarget_lock_acquire_recursive>
 800273a:	bf00      	nop
 800273c:	200004a4 	.word	0x200004a4

08002740 <__malloc_unlock>:
 8002740:	4801      	ldr	r0, [pc, #4]	; (8002748 <__malloc_unlock+0x8>)
 8002742:	f7ff bfed 	b.w	8002720 <__retarget_lock_release_recursive>
 8002746:	bf00      	nop
 8002748:	200004a4 	.word	0x200004a4

0800274c <_free_r>:
 800274c:	b538      	push	{r3, r4, r5, lr}
 800274e:	4605      	mov	r5, r0
 8002750:	2900      	cmp	r1, #0
 8002752:	d040      	beq.n	80027d6 <_free_r+0x8a>
 8002754:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002758:	1f0c      	subs	r4, r1, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	bfb8      	it	lt
 800275e:	18e4      	addlt	r4, r4, r3
 8002760:	f7ff ffe8 	bl	8002734 <__malloc_lock>
 8002764:	4a1c      	ldr	r2, [pc, #112]	; (80027d8 <_free_r+0x8c>)
 8002766:	6813      	ldr	r3, [r2, #0]
 8002768:	b933      	cbnz	r3, 8002778 <_free_r+0x2c>
 800276a:	6063      	str	r3, [r4, #4]
 800276c:	6014      	str	r4, [r2, #0]
 800276e:	4628      	mov	r0, r5
 8002770:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002774:	f7ff bfe4 	b.w	8002740 <__malloc_unlock>
 8002778:	42a3      	cmp	r3, r4
 800277a:	d908      	bls.n	800278e <_free_r+0x42>
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	1821      	adds	r1, r4, r0
 8002780:	428b      	cmp	r3, r1
 8002782:	bf01      	itttt	eq
 8002784:	6819      	ldreq	r1, [r3, #0]
 8002786:	685b      	ldreq	r3, [r3, #4]
 8002788:	1809      	addeq	r1, r1, r0
 800278a:	6021      	streq	r1, [r4, #0]
 800278c:	e7ed      	b.n	800276a <_free_r+0x1e>
 800278e:	461a      	mov	r2, r3
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	b10b      	cbz	r3, 8002798 <_free_r+0x4c>
 8002794:	42a3      	cmp	r3, r4
 8002796:	d9fa      	bls.n	800278e <_free_r+0x42>
 8002798:	6811      	ldr	r1, [r2, #0]
 800279a:	1850      	adds	r0, r2, r1
 800279c:	42a0      	cmp	r0, r4
 800279e:	d10b      	bne.n	80027b8 <_free_r+0x6c>
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	4401      	add	r1, r0
 80027a4:	1850      	adds	r0, r2, r1
 80027a6:	4283      	cmp	r3, r0
 80027a8:	6011      	str	r1, [r2, #0]
 80027aa:	d1e0      	bne.n	800276e <_free_r+0x22>
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4408      	add	r0, r1
 80027b2:	6010      	str	r0, [r2, #0]
 80027b4:	6053      	str	r3, [r2, #4]
 80027b6:	e7da      	b.n	800276e <_free_r+0x22>
 80027b8:	d902      	bls.n	80027c0 <_free_r+0x74>
 80027ba:	230c      	movs	r3, #12
 80027bc:	602b      	str	r3, [r5, #0]
 80027be:	e7d6      	b.n	800276e <_free_r+0x22>
 80027c0:	6820      	ldr	r0, [r4, #0]
 80027c2:	1821      	adds	r1, r4, r0
 80027c4:	428b      	cmp	r3, r1
 80027c6:	bf01      	itttt	eq
 80027c8:	6819      	ldreq	r1, [r3, #0]
 80027ca:	685b      	ldreq	r3, [r3, #4]
 80027cc:	1809      	addeq	r1, r1, r0
 80027ce:	6021      	streq	r1, [r4, #0]
 80027d0:	6063      	str	r3, [r4, #4]
 80027d2:	6054      	str	r4, [r2, #4]
 80027d4:	e7cb      	b.n	800276e <_free_r+0x22>
 80027d6:	bd38      	pop	{r3, r4, r5, pc}
 80027d8:	2000049c 	.word	0x2000049c

080027dc <__sfputc_r>:
 80027dc:	6893      	ldr	r3, [r2, #8]
 80027de:	b410      	push	{r4}
 80027e0:	3b01      	subs	r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	6093      	str	r3, [r2, #8]
 80027e6:	da07      	bge.n	80027f8 <__sfputc_r+0x1c>
 80027e8:	6994      	ldr	r4, [r2, #24]
 80027ea:	42a3      	cmp	r3, r4
 80027ec:	db01      	blt.n	80027f2 <__sfputc_r+0x16>
 80027ee:	290a      	cmp	r1, #10
 80027f0:	d102      	bne.n	80027f8 <__sfputc_r+0x1c>
 80027f2:	bc10      	pop	{r4}
 80027f4:	f000 b948 	b.w	8002a88 <__swbuf_r>
 80027f8:	6813      	ldr	r3, [r2, #0]
 80027fa:	1c58      	adds	r0, r3, #1
 80027fc:	6010      	str	r0, [r2, #0]
 80027fe:	7019      	strb	r1, [r3, #0]
 8002800:	4608      	mov	r0, r1
 8002802:	bc10      	pop	{r4}
 8002804:	4770      	bx	lr

08002806 <__sfputs_r>:
 8002806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002808:	4606      	mov	r6, r0
 800280a:	460f      	mov	r7, r1
 800280c:	4614      	mov	r4, r2
 800280e:	18d5      	adds	r5, r2, r3
 8002810:	42ac      	cmp	r4, r5
 8002812:	d101      	bne.n	8002818 <__sfputs_r+0x12>
 8002814:	2000      	movs	r0, #0
 8002816:	e007      	b.n	8002828 <__sfputs_r+0x22>
 8002818:	463a      	mov	r2, r7
 800281a:	4630      	mov	r0, r6
 800281c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002820:	f7ff ffdc 	bl	80027dc <__sfputc_r>
 8002824:	1c43      	adds	r3, r0, #1
 8002826:	d1f3      	bne.n	8002810 <__sfputs_r+0xa>
 8002828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800282c <_vfiprintf_r>:
 800282c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002830:	460d      	mov	r5, r1
 8002832:	4614      	mov	r4, r2
 8002834:	4698      	mov	r8, r3
 8002836:	4606      	mov	r6, r0
 8002838:	b09d      	sub	sp, #116	; 0x74
 800283a:	b118      	cbz	r0, 8002844 <_vfiprintf_r+0x18>
 800283c:	6983      	ldr	r3, [r0, #24]
 800283e:	b90b      	cbnz	r3, 8002844 <_vfiprintf_r+0x18>
 8002840:	f000 fb00 	bl	8002e44 <__sinit>
 8002844:	4b88      	ldr	r3, [pc, #544]	; (8002a68 <_vfiprintf_r+0x23c>)
 8002846:	429d      	cmp	r5, r3
 8002848:	d11b      	bne.n	8002882 <_vfiprintf_r+0x56>
 800284a:	6875      	ldr	r5, [r6, #4]
 800284c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800284e:	07d9      	lsls	r1, r3, #31
 8002850:	d405      	bmi.n	800285e <_vfiprintf_r+0x32>
 8002852:	89ab      	ldrh	r3, [r5, #12]
 8002854:	059a      	lsls	r2, r3, #22
 8002856:	d402      	bmi.n	800285e <_vfiprintf_r+0x32>
 8002858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800285a:	f7ff ff60 	bl	800271e <__retarget_lock_acquire_recursive>
 800285e:	89ab      	ldrh	r3, [r5, #12]
 8002860:	071b      	lsls	r3, r3, #28
 8002862:	d501      	bpl.n	8002868 <_vfiprintf_r+0x3c>
 8002864:	692b      	ldr	r3, [r5, #16]
 8002866:	b9eb      	cbnz	r3, 80028a4 <_vfiprintf_r+0x78>
 8002868:	4629      	mov	r1, r5
 800286a:	4630      	mov	r0, r6
 800286c:	f000 f95e 	bl	8002b2c <__swsetup_r>
 8002870:	b1c0      	cbz	r0, 80028a4 <_vfiprintf_r+0x78>
 8002872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002874:	07dc      	lsls	r4, r3, #31
 8002876:	d50e      	bpl.n	8002896 <_vfiprintf_r+0x6a>
 8002878:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800287c:	b01d      	add	sp, #116	; 0x74
 800287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002882:	4b7a      	ldr	r3, [pc, #488]	; (8002a6c <_vfiprintf_r+0x240>)
 8002884:	429d      	cmp	r5, r3
 8002886:	d101      	bne.n	800288c <_vfiprintf_r+0x60>
 8002888:	68b5      	ldr	r5, [r6, #8]
 800288a:	e7df      	b.n	800284c <_vfiprintf_r+0x20>
 800288c:	4b78      	ldr	r3, [pc, #480]	; (8002a70 <_vfiprintf_r+0x244>)
 800288e:	429d      	cmp	r5, r3
 8002890:	bf08      	it	eq
 8002892:	68f5      	ldreq	r5, [r6, #12]
 8002894:	e7da      	b.n	800284c <_vfiprintf_r+0x20>
 8002896:	89ab      	ldrh	r3, [r5, #12]
 8002898:	0598      	lsls	r0, r3, #22
 800289a:	d4ed      	bmi.n	8002878 <_vfiprintf_r+0x4c>
 800289c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800289e:	f7ff ff3f 	bl	8002720 <__retarget_lock_release_recursive>
 80028a2:	e7e9      	b.n	8002878 <_vfiprintf_r+0x4c>
 80028a4:	2300      	movs	r3, #0
 80028a6:	9309      	str	r3, [sp, #36]	; 0x24
 80028a8:	2320      	movs	r3, #32
 80028aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028ae:	2330      	movs	r3, #48	; 0x30
 80028b0:	f04f 0901 	mov.w	r9, #1
 80028b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80028b8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8002a74 <_vfiprintf_r+0x248>
 80028bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028c0:	4623      	mov	r3, r4
 80028c2:	469a      	mov	sl, r3
 80028c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80028c8:	b10a      	cbz	r2, 80028ce <_vfiprintf_r+0xa2>
 80028ca:	2a25      	cmp	r2, #37	; 0x25
 80028cc:	d1f9      	bne.n	80028c2 <_vfiprintf_r+0x96>
 80028ce:	ebba 0b04 	subs.w	fp, sl, r4
 80028d2:	d00b      	beq.n	80028ec <_vfiprintf_r+0xc0>
 80028d4:	465b      	mov	r3, fp
 80028d6:	4622      	mov	r2, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	4630      	mov	r0, r6
 80028dc:	f7ff ff93 	bl	8002806 <__sfputs_r>
 80028e0:	3001      	adds	r0, #1
 80028e2:	f000 80a8 	beq.w	8002a36 <_vfiprintf_r+0x20a>
 80028e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80028e8:	445a      	add	r2, fp
 80028ea:	9209      	str	r2, [sp, #36]	; 0x24
 80028ec:	f89a 3000 	ldrb.w	r3, [sl]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80a0 	beq.w	8002a36 <_vfiprintf_r+0x20a>
 80028f6:	2300      	movs	r3, #0
 80028f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002900:	f10a 0a01 	add.w	sl, sl, #1
 8002904:	9304      	str	r3, [sp, #16]
 8002906:	9307      	str	r3, [sp, #28]
 8002908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800290c:	931a      	str	r3, [sp, #104]	; 0x68
 800290e:	4654      	mov	r4, sl
 8002910:	2205      	movs	r2, #5
 8002912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002916:	4857      	ldr	r0, [pc, #348]	; (8002a74 <_vfiprintf_r+0x248>)
 8002918:	f000 fb96 	bl	8003048 <memchr>
 800291c:	9b04      	ldr	r3, [sp, #16]
 800291e:	b9d0      	cbnz	r0, 8002956 <_vfiprintf_r+0x12a>
 8002920:	06d9      	lsls	r1, r3, #27
 8002922:	bf44      	itt	mi
 8002924:	2220      	movmi	r2, #32
 8002926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800292a:	071a      	lsls	r2, r3, #28
 800292c:	bf44      	itt	mi
 800292e:	222b      	movmi	r2, #43	; 0x2b
 8002930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002934:	f89a 2000 	ldrb.w	r2, [sl]
 8002938:	2a2a      	cmp	r2, #42	; 0x2a
 800293a:	d014      	beq.n	8002966 <_vfiprintf_r+0x13a>
 800293c:	4654      	mov	r4, sl
 800293e:	2000      	movs	r0, #0
 8002940:	f04f 0c0a 	mov.w	ip, #10
 8002944:	9a07      	ldr	r2, [sp, #28]
 8002946:	4621      	mov	r1, r4
 8002948:	f811 3b01 	ldrb.w	r3, [r1], #1
 800294c:	3b30      	subs	r3, #48	; 0x30
 800294e:	2b09      	cmp	r3, #9
 8002950:	d94c      	bls.n	80029ec <_vfiprintf_r+0x1c0>
 8002952:	b970      	cbnz	r0, 8002972 <_vfiprintf_r+0x146>
 8002954:	e014      	b.n	8002980 <_vfiprintf_r+0x154>
 8002956:	eba0 0008 	sub.w	r0, r0, r8
 800295a:	fa09 f000 	lsl.w	r0, r9, r0
 800295e:	4318      	orrs	r0, r3
 8002960:	46a2      	mov	sl, r4
 8002962:	9004      	str	r0, [sp, #16]
 8002964:	e7d3      	b.n	800290e <_vfiprintf_r+0xe2>
 8002966:	9a03      	ldr	r2, [sp, #12]
 8002968:	1d11      	adds	r1, r2, #4
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	9103      	str	r1, [sp, #12]
 800296e:	2a00      	cmp	r2, #0
 8002970:	db01      	blt.n	8002976 <_vfiprintf_r+0x14a>
 8002972:	9207      	str	r2, [sp, #28]
 8002974:	e004      	b.n	8002980 <_vfiprintf_r+0x154>
 8002976:	4252      	negs	r2, r2
 8002978:	f043 0302 	orr.w	r3, r3, #2
 800297c:	9207      	str	r2, [sp, #28]
 800297e:	9304      	str	r3, [sp, #16]
 8002980:	7823      	ldrb	r3, [r4, #0]
 8002982:	2b2e      	cmp	r3, #46	; 0x2e
 8002984:	d10c      	bne.n	80029a0 <_vfiprintf_r+0x174>
 8002986:	7863      	ldrb	r3, [r4, #1]
 8002988:	2b2a      	cmp	r3, #42	; 0x2a
 800298a:	d134      	bne.n	80029f6 <_vfiprintf_r+0x1ca>
 800298c:	9b03      	ldr	r3, [sp, #12]
 800298e:	3402      	adds	r4, #2
 8002990:	1d1a      	adds	r2, r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	9203      	str	r2, [sp, #12]
 8002996:	2b00      	cmp	r3, #0
 8002998:	bfb8      	it	lt
 800299a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800299e:	9305      	str	r3, [sp, #20]
 80029a0:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a78 <_vfiprintf_r+0x24c>
 80029a4:	2203      	movs	r2, #3
 80029a6:	4650      	mov	r0, sl
 80029a8:	7821      	ldrb	r1, [r4, #0]
 80029aa:	f000 fb4d 	bl	8003048 <memchr>
 80029ae:	b138      	cbz	r0, 80029c0 <_vfiprintf_r+0x194>
 80029b0:	2240      	movs	r2, #64	; 0x40
 80029b2:	9b04      	ldr	r3, [sp, #16]
 80029b4:	eba0 000a 	sub.w	r0, r0, sl
 80029b8:	4082      	lsls	r2, r0
 80029ba:	4313      	orrs	r3, r2
 80029bc:	3401      	adds	r4, #1
 80029be:	9304      	str	r3, [sp, #16]
 80029c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029c4:	2206      	movs	r2, #6
 80029c6:	482d      	ldr	r0, [pc, #180]	; (8002a7c <_vfiprintf_r+0x250>)
 80029c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029cc:	f000 fb3c 	bl	8003048 <memchr>
 80029d0:	2800      	cmp	r0, #0
 80029d2:	d03f      	beq.n	8002a54 <_vfiprintf_r+0x228>
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <_vfiprintf_r+0x254>)
 80029d6:	bb1b      	cbnz	r3, 8002a20 <_vfiprintf_r+0x1f4>
 80029d8:	9b03      	ldr	r3, [sp, #12]
 80029da:	3307      	adds	r3, #7
 80029dc:	f023 0307 	bic.w	r3, r3, #7
 80029e0:	3308      	adds	r3, #8
 80029e2:	9303      	str	r3, [sp, #12]
 80029e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029e6:	443b      	add	r3, r7
 80029e8:	9309      	str	r3, [sp, #36]	; 0x24
 80029ea:	e769      	b.n	80028c0 <_vfiprintf_r+0x94>
 80029ec:	460c      	mov	r4, r1
 80029ee:	2001      	movs	r0, #1
 80029f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80029f4:	e7a7      	b.n	8002946 <_vfiprintf_r+0x11a>
 80029f6:	2300      	movs	r3, #0
 80029f8:	f04f 0c0a 	mov.w	ip, #10
 80029fc:	4619      	mov	r1, r3
 80029fe:	3401      	adds	r4, #1
 8002a00:	9305      	str	r3, [sp, #20]
 8002a02:	4620      	mov	r0, r4
 8002a04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a08:	3a30      	subs	r2, #48	; 0x30
 8002a0a:	2a09      	cmp	r2, #9
 8002a0c:	d903      	bls.n	8002a16 <_vfiprintf_r+0x1ea>
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0c6      	beq.n	80029a0 <_vfiprintf_r+0x174>
 8002a12:	9105      	str	r1, [sp, #20]
 8002a14:	e7c4      	b.n	80029a0 <_vfiprintf_r+0x174>
 8002a16:	4604      	mov	r4, r0
 8002a18:	2301      	movs	r3, #1
 8002a1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002a1e:	e7f0      	b.n	8002a02 <_vfiprintf_r+0x1d6>
 8002a20:	ab03      	add	r3, sp, #12
 8002a22:	9300      	str	r3, [sp, #0]
 8002a24:	462a      	mov	r2, r5
 8002a26:	4630      	mov	r0, r6
 8002a28:	4b16      	ldr	r3, [pc, #88]	; (8002a84 <_vfiprintf_r+0x258>)
 8002a2a:	a904      	add	r1, sp, #16
 8002a2c:	f3af 8000 	nop.w
 8002a30:	4607      	mov	r7, r0
 8002a32:	1c78      	adds	r0, r7, #1
 8002a34:	d1d6      	bne.n	80029e4 <_vfiprintf_r+0x1b8>
 8002a36:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a38:	07d9      	lsls	r1, r3, #31
 8002a3a:	d405      	bmi.n	8002a48 <_vfiprintf_r+0x21c>
 8002a3c:	89ab      	ldrh	r3, [r5, #12]
 8002a3e:	059a      	lsls	r2, r3, #22
 8002a40:	d402      	bmi.n	8002a48 <_vfiprintf_r+0x21c>
 8002a42:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a44:	f7ff fe6c 	bl	8002720 <__retarget_lock_release_recursive>
 8002a48:	89ab      	ldrh	r3, [r5, #12]
 8002a4a:	065b      	lsls	r3, r3, #25
 8002a4c:	f53f af14 	bmi.w	8002878 <_vfiprintf_r+0x4c>
 8002a50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a52:	e713      	b.n	800287c <_vfiprintf_r+0x50>
 8002a54:	ab03      	add	r3, sp, #12
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	462a      	mov	r2, r5
 8002a5a:	4630      	mov	r0, r6
 8002a5c:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <_vfiprintf_r+0x258>)
 8002a5e:	a904      	add	r1, sp, #16
 8002a60:	f000 fb72 	bl	8003148 <_printf_i>
 8002a64:	e7e4      	b.n	8002a30 <_vfiprintf_r+0x204>
 8002a66:	bf00      	nop
 8002a68:	08004d34 	.word	0x08004d34
 8002a6c:	08004d54 	.word	0x08004d54
 8002a70:	08004d14 	.word	0x08004d14
 8002a74:	08004d03 	.word	0x08004d03
 8002a78:	08004d09 	.word	0x08004d09
 8002a7c:	08004d0d 	.word	0x08004d0d
 8002a80:	00000000 	.word	0x00000000
 8002a84:	08002807 	.word	0x08002807

08002a88 <__swbuf_r>:
 8002a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a8a:	460e      	mov	r6, r1
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	4605      	mov	r5, r0
 8002a90:	b118      	cbz	r0, 8002a9a <__swbuf_r+0x12>
 8002a92:	6983      	ldr	r3, [r0, #24]
 8002a94:	b90b      	cbnz	r3, 8002a9a <__swbuf_r+0x12>
 8002a96:	f000 f9d5 	bl	8002e44 <__sinit>
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <__swbuf_r+0x98>)
 8002a9c:	429c      	cmp	r4, r3
 8002a9e:	d12b      	bne.n	8002af8 <__swbuf_r+0x70>
 8002aa0:	686c      	ldr	r4, [r5, #4]
 8002aa2:	69a3      	ldr	r3, [r4, #24]
 8002aa4:	60a3      	str	r3, [r4, #8]
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	071a      	lsls	r2, r3, #28
 8002aaa:	d52f      	bpl.n	8002b0c <__swbuf_r+0x84>
 8002aac:	6923      	ldr	r3, [r4, #16]
 8002aae:	b36b      	cbz	r3, 8002b0c <__swbuf_r+0x84>
 8002ab0:	6923      	ldr	r3, [r4, #16]
 8002ab2:	6820      	ldr	r0, [r4, #0]
 8002ab4:	b2f6      	uxtb	r6, r6
 8002ab6:	1ac0      	subs	r0, r0, r3
 8002ab8:	6963      	ldr	r3, [r4, #20]
 8002aba:	4637      	mov	r7, r6
 8002abc:	4283      	cmp	r3, r0
 8002abe:	dc04      	bgt.n	8002aca <__swbuf_r+0x42>
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	4628      	mov	r0, r5
 8002ac4:	f000 f92a 	bl	8002d1c <_fflush_r>
 8002ac8:	bb30      	cbnz	r0, 8002b18 <__swbuf_r+0x90>
 8002aca:	68a3      	ldr	r3, [r4, #8]
 8002acc:	3001      	adds	r0, #1
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	60a3      	str	r3, [r4, #8]
 8002ad2:	6823      	ldr	r3, [r4, #0]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	6022      	str	r2, [r4, #0]
 8002ad8:	701e      	strb	r6, [r3, #0]
 8002ada:	6963      	ldr	r3, [r4, #20]
 8002adc:	4283      	cmp	r3, r0
 8002ade:	d004      	beq.n	8002aea <__swbuf_r+0x62>
 8002ae0:	89a3      	ldrh	r3, [r4, #12]
 8002ae2:	07db      	lsls	r3, r3, #31
 8002ae4:	d506      	bpl.n	8002af4 <__swbuf_r+0x6c>
 8002ae6:	2e0a      	cmp	r6, #10
 8002ae8:	d104      	bne.n	8002af4 <__swbuf_r+0x6c>
 8002aea:	4621      	mov	r1, r4
 8002aec:	4628      	mov	r0, r5
 8002aee:	f000 f915 	bl	8002d1c <_fflush_r>
 8002af2:	b988      	cbnz	r0, 8002b18 <__swbuf_r+0x90>
 8002af4:	4638      	mov	r0, r7
 8002af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002af8:	4b0a      	ldr	r3, [pc, #40]	; (8002b24 <__swbuf_r+0x9c>)
 8002afa:	429c      	cmp	r4, r3
 8002afc:	d101      	bne.n	8002b02 <__swbuf_r+0x7a>
 8002afe:	68ac      	ldr	r4, [r5, #8]
 8002b00:	e7cf      	b.n	8002aa2 <__swbuf_r+0x1a>
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <__swbuf_r+0xa0>)
 8002b04:	429c      	cmp	r4, r3
 8002b06:	bf08      	it	eq
 8002b08:	68ec      	ldreq	r4, [r5, #12]
 8002b0a:	e7ca      	b.n	8002aa2 <__swbuf_r+0x1a>
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	4628      	mov	r0, r5
 8002b10:	f000 f80c 	bl	8002b2c <__swsetup_r>
 8002b14:	2800      	cmp	r0, #0
 8002b16:	d0cb      	beq.n	8002ab0 <__swbuf_r+0x28>
 8002b18:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002b1c:	e7ea      	b.n	8002af4 <__swbuf_r+0x6c>
 8002b1e:	bf00      	nop
 8002b20:	08004d34 	.word	0x08004d34
 8002b24:	08004d54 	.word	0x08004d54
 8002b28:	08004d14 	.word	0x08004d14

08002b2c <__swsetup_r>:
 8002b2c:	4b32      	ldr	r3, [pc, #200]	; (8002bf8 <__swsetup_r+0xcc>)
 8002b2e:	b570      	push	{r4, r5, r6, lr}
 8002b30:	681d      	ldr	r5, [r3, #0]
 8002b32:	4606      	mov	r6, r0
 8002b34:	460c      	mov	r4, r1
 8002b36:	b125      	cbz	r5, 8002b42 <__swsetup_r+0x16>
 8002b38:	69ab      	ldr	r3, [r5, #24]
 8002b3a:	b913      	cbnz	r3, 8002b42 <__swsetup_r+0x16>
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	f000 f981 	bl	8002e44 <__sinit>
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <__swsetup_r+0xd0>)
 8002b44:	429c      	cmp	r4, r3
 8002b46:	d10f      	bne.n	8002b68 <__swsetup_r+0x3c>
 8002b48:	686c      	ldr	r4, [r5, #4]
 8002b4a:	89a3      	ldrh	r3, [r4, #12]
 8002b4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002b50:	0719      	lsls	r1, r3, #28
 8002b52:	d42c      	bmi.n	8002bae <__swsetup_r+0x82>
 8002b54:	06dd      	lsls	r5, r3, #27
 8002b56:	d411      	bmi.n	8002b7c <__swsetup_r+0x50>
 8002b58:	2309      	movs	r3, #9
 8002b5a:	6033      	str	r3, [r6, #0]
 8002b5c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b64:	81a3      	strh	r3, [r4, #12]
 8002b66:	e03e      	b.n	8002be6 <__swsetup_r+0xba>
 8002b68:	4b25      	ldr	r3, [pc, #148]	; (8002c00 <__swsetup_r+0xd4>)
 8002b6a:	429c      	cmp	r4, r3
 8002b6c:	d101      	bne.n	8002b72 <__swsetup_r+0x46>
 8002b6e:	68ac      	ldr	r4, [r5, #8]
 8002b70:	e7eb      	b.n	8002b4a <__swsetup_r+0x1e>
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <__swsetup_r+0xd8>)
 8002b74:	429c      	cmp	r4, r3
 8002b76:	bf08      	it	eq
 8002b78:	68ec      	ldreq	r4, [r5, #12]
 8002b7a:	e7e6      	b.n	8002b4a <__swsetup_r+0x1e>
 8002b7c:	0758      	lsls	r0, r3, #29
 8002b7e:	d512      	bpl.n	8002ba6 <__swsetup_r+0x7a>
 8002b80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b82:	b141      	cbz	r1, 8002b96 <__swsetup_r+0x6a>
 8002b84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b88:	4299      	cmp	r1, r3
 8002b8a:	d002      	beq.n	8002b92 <__swsetup_r+0x66>
 8002b8c:	4630      	mov	r0, r6
 8002b8e:	f7ff fddd 	bl	800274c <_free_r>
 8002b92:	2300      	movs	r3, #0
 8002b94:	6363      	str	r3, [r4, #52]	; 0x34
 8002b96:	89a3      	ldrh	r3, [r4, #12]
 8002b98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b9c:	81a3      	strh	r3, [r4, #12]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	6063      	str	r3, [r4, #4]
 8002ba2:	6923      	ldr	r3, [r4, #16]
 8002ba4:	6023      	str	r3, [r4, #0]
 8002ba6:	89a3      	ldrh	r3, [r4, #12]
 8002ba8:	f043 0308 	orr.w	r3, r3, #8
 8002bac:	81a3      	strh	r3, [r4, #12]
 8002bae:	6923      	ldr	r3, [r4, #16]
 8002bb0:	b94b      	cbnz	r3, 8002bc6 <__swsetup_r+0x9a>
 8002bb2:	89a3      	ldrh	r3, [r4, #12]
 8002bb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002bb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bbc:	d003      	beq.n	8002bc6 <__swsetup_r+0x9a>
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	f000 fa01 	bl	8002fc8 <__smakebuf_r>
 8002bc6:	89a0      	ldrh	r0, [r4, #12]
 8002bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002bcc:	f010 0301 	ands.w	r3, r0, #1
 8002bd0:	d00a      	beq.n	8002be8 <__swsetup_r+0xbc>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60a3      	str	r3, [r4, #8]
 8002bd6:	6963      	ldr	r3, [r4, #20]
 8002bd8:	425b      	negs	r3, r3
 8002bda:	61a3      	str	r3, [r4, #24]
 8002bdc:	6923      	ldr	r3, [r4, #16]
 8002bde:	b943      	cbnz	r3, 8002bf2 <__swsetup_r+0xc6>
 8002be0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002be4:	d1ba      	bne.n	8002b5c <__swsetup_r+0x30>
 8002be6:	bd70      	pop	{r4, r5, r6, pc}
 8002be8:	0781      	lsls	r1, r0, #30
 8002bea:	bf58      	it	pl
 8002bec:	6963      	ldrpl	r3, [r4, #20]
 8002bee:	60a3      	str	r3, [r4, #8]
 8002bf0:	e7f4      	b.n	8002bdc <__swsetup_r+0xb0>
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	e7f7      	b.n	8002be6 <__swsetup_r+0xba>
 8002bf6:	bf00      	nop
 8002bf8:	2000000c 	.word	0x2000000c
 8002bfc:	08004d34 	.word	0x08004d34
 8002c00:	08004d54 	.word	0x08004d54
 8002c04:	08004d14 	.word	0x08004d14

08002c08 <abort>:
 8002c08:	2006      	movs	r0, #6
 8002c0a:	b508      	push	{r3, lr}
 8002c0c:	f000 fbe6 	bl	80033dc <raise>
 8002c10:	2001      	movs	r0, #1
 8002c12:	f7fd ff0a 	bl	8000a2a <_exit>
	...

08002c18 <__sflush_r>:
 8002c18:	898a      	ldrh	r2, [r1, #12]
 8002c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c1c:	4605      	mov	r5, r0
 8002c1e:	0710      	lsls	r0, r2, #28
 8002c20:	460c      	mov	r4, r1
 8002c22:	d457      	bmi.n	8002cd4 <__sflush_r+0xbc>
 8002c24:	684b      	ldr	r3, [r1, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	dc04      	bgt.n	8002c34 <__sflush_r+0x1c>
 8002c2a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	dc01      	bgt.n	8002c34 <__sflush_r+0x1c>
 8002c30:	2000      	movs	r0, #0
 8002c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c36:	2e00      	cmp	r6, #0
 8002c38:	d0fa      	beq.n	8002c30 <__sflush_r+0x18>
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002c40:	682f      	ldr	r7, [r5, #0]
 8002c42:	6a21      	ldr	r1, [r4, #32]
 8002c44:	602b      	str	r3, [r5, #0]
 8002c46:	d032      	beq.n	8002cae <__sflush_r+0x96>
 8002c48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002c4a:	89a3      	ldrh	r3, [r4, #12]
 8002c4c:	075a      	lsls	r2, r3, #29
 8002c4e:	d505      	bpl.n	8002c5c <__sflush_r+0x44>
 8002c50:	6863      	ldr	r3, [r4, #4]
 8002c52:	1ac0      	subs	r0, r0, r3
 8002c54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002c56:	b10b      	cbz	r3, 8002c5c <__sflush_r+0x44>
 8002c58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002c5a:	1ac0      	subs	r0, r0, r3
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	4602      	mov	r2, r0
 8002c60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002c62:	4628      	mov	r0, r5
 8002c64:	6a21      	ldr	r1, [r4, #32]
 8002c66:	47b0      	blx	r6
 8002c68:	1c43      	adds	r3, r0, #1
 8002c6a:	89a3      	ldrh	r3, [r4, #12]
 8002c6c:	d106      	bne.n	8002c7c <__sflush_r+0x64>
 8002c6e:	6829      	ldr	r1, [r5, #0]
 8002c70:	291d      	cmp	r1, #29
 8002c72:	d82b      	bhi.n	8002ccc <__sflush_r+0xb4>
 8002c74:	4a28      	ldr	r2, [pc, #160]	; (8002d18 <__sflush_r+0x100>)
 8002c76:	410a      	asrs	r2, r1
 8002c78:	07d6      	lsls	r6, r2, #31
 8002c7a:	d427      	bmi.n	8002ccc <__sflush_r+0xb4>
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	6062      	str	r2, [r4, #4]
 8002c80:	6922      	ldr	r2, [r4, #16]
 8002c82:	04d9      	lsls	r1, r3, #19
 8002c84:	6022      	str	r2, [r4, #0]
 8002c86:	d504      	bpl.n	8002c92 <__sflush_r+0x7a>
 8002c88:	1c42      	adds	r2, r0, #1
 8002c8a:	d101      	bne.n	8002c90 <__sflush_r+0x78>
 8002c8c:	682b      	ldr	r3, [r5, #0]
 8002c8e:	b903      	cbnz	r3, 8002c92 <__sflush_r+0x7a>
 8002c90:	6560      	str	r0, [r4, #84]	; 0x54
 8002c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c94:	602f      	str	r7, [r5, #0]
 8002c96:	2900      	cmp	r1, #0
 8002c98:	d0ca      	beq.n	8002c30 <__sflush_r+0x18>
 8002c9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c9e:	4299      	cmp	r1, r3
 8002ca0:	d002      	beq.n	8002ca8 <__sflush_r+0x90>
 8002ca2:	4628      	mov	r0, r5
 8002ca4:	f7ff fd52 	bl	800274c <_free_r>
 8002ca8:	2000      	movs	r0, #0
 8002caa:	6360      	str	r0, [r4, #52]	; 0x34
 8002cac:	e7c1      	b.n	8002c32 <__sflush_r+0x1a>
 8002cae:	2301      	movs	r3, #1
 8002cb0:	4628      	mov	r0, r5
 8002cb2:	47b0      	blx	r6
 8002cb4:	1c41      	adds	r1, r0, #1
 8002cb6:	d1c8      	bne.n	8002c4a <__sflush_r+0x32>
 8002cb8:	682b      	ldr	r3, [r5, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0c5      	beq.n	8002c4a <__sflush_r+0x32>
 8002cbe:	2b1d      	cmp	r3, #29
 8002cc0:	d001      	beq.n	8002cc6 <__sflush_r+0xae>
 8002cc2:	2b16      	cmp	r3, #22
 8002cc4:	d101      	bne.n	8002cca <__sflush_r+0xb2>
 8002cc6:	602f      	str	r7, [r5, #0]
 8002cc8:	e7b2      	b.n	8002c30 <__sflush_r+0x18>
 8002cca:	89a3      	ldrh	r3, [r4, #12]
 8002ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cd0:	81a3      	strh	r3, [r4, #12]
 8002cd2:	e7ae      	b.n	8002c32 <__sflush_r+0x1a>
 8002cd4:	690f      	ldr	r7, [r1, #16]
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d0aa      	beq.n	8002c30 <__sflush_r+0x18>
 8002cda:	0793      	lsls	r3, r2, #30
 8002cdc:	bf18      	it	ne
 8002cde:	2300      	movne	r3, #0
 8002ce0:	680e      	ldr	r6, [r1, #0]
 8002ce2:	bf08      	it	eq
 8002ce4:	694b      	ldreq	r3, [r1, #20]
 8002ce6:	1bf6      	subs	r6, r6, r7
 8002ce8:	600f      	str	r7, [r1, #0]
 8002cea:	608b      	str	r3, [r1, #8]
 8002cec:	2e00      	cmp	r6, #0
 8002cee:	dd9f      	ble.n	8002c30 <__sflush_r+0x18>
 8002cf0:	4633      	mov	r3, r6
 8002cf2:	463a      	mov	r2, r7
 8002cf4:	4628      	mov	r0, r5
 8002cf6:	6a21      	ldr	r1, [r4, #32]
 8002cf8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8002cfc:	47e0      	blx	ip
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	dc06      	bgt.n	8002d10 <__sflush_r+0xf8>
 8002d02:	89a3      	ldrh	r3, [r4, #12]
 8002d04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d0c:	81a3      	strh	r3, [r4, #12]
 8002d0e:	e790      	b.n	8002c32 <__sflush_r+0x1a>
 8002d10:	4407      	add	r7, r0
 8002d12:	1a36      	subs	r6, r6, r0
 8002d14:	e7ea      	b.n	8002cec <__sflush_r+0xd4>
 8002d16:	bf00      	nop
 8002d18:	dfbffffe 	.word	0xdfbffffe

08002d1c <_fflush_r>:
 8002d1c:	b538      	push	{r3, r4, r5, lr}
 8002d1e:	690b      	ldr	r3, [r1, #16]
 8002d20:	4605      	mov	r5, r0
 8002d22:	460c      	mov	r4, r1
 8002d24:	b913      	cbnz	r3, 8002d2c <_fflush_r+0x10>
 8002d26:	2500      	movs	r5, #0
 8002d28:	4628      	mov	r0, r5
 8002d2a:	bd38      	pop	{r3, r4, r5, pc}
 8002d2c:	b118      	cbz	r0, 8002d36 <_fflush_r+0x1a>
 8002d2e:	6983      	ldr	r3, [r0, #24]
 8002d30:	b90b      	cbnz	r3, 8002d36 <_fflush_r+0x1a>
 8002d32:	f000 f887 	bl	8002e44 <__sinit>
 8002d36:	4b14      	ldr	r3, [pc, #80]	; (8002d88 <_fflush_r+0x6c>)
 8002d38:	429c      	cmp	r4, r3
 8002d3a:	d11b      	bne.n	8002d74 <_fflush_r+0x58>
 8002d3c:	686c      	ldr	r4, [r5, #4]
 8002d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0ef      	beq.n	8002d26 <_fflush_r+0xa>
 8002d46:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002d48:	07d0      	lsls	r0, r2, #31
 8002d4a:	d404      	bmi.n	8002d56 <_fflush_r+0x3a>
 8002d4c:	0599      	lsls	r1, r3, #22
 8002d4e:	d402      	bmi.n	8002d56 <_fflush_r+0x3a>
 8002d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d52:	f7ff fce4 	bl	800271e <__retarget_lock_acquire_recursive>
 8002d56:	4628      	mov	r0, r5
 8002d58:	4621      	mov	r1, r4
 8002d5a:	f7ff ff5d 	bl	8002c18 <__sflush_r>
 8002d5e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d60:	4605      	mov	r5, r0
 8002d62:	07da      	lsls	r2, r3, #31
 8002d64:	d4e0      	bmi.n	8002d28 <_fflush_r+0xc>
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	059b      	lsls	r3, r3, #22
 8002d6a:	d4dd      	bmi.n	8002d28 <_fflush_r+0xc>
 8002d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d6e:	f7ff fcd7 	bl	8002720 <__retarget_lock_release_recursive>
 8002d72:	e7d9      	b.n	8002d28 <_fflush_r+0xc>
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <_fflush_r+0x70>)
 8002d76:	429c      	cmp	r4, r3
 8002d78:	d101      	bne.n	8002d7e <_fflush_r+0x62>
 8002d7a:	68ac      	ldr	r4, [r5, #8]
 8002d7c:	e7df      	b.n	8002d3e <_fflush_r+0x22>
 8002d7e:	4b04      	ldr	r3, [pc, #16]	; (8002d90 <_fflush_r+0x74>)
 8002d80:	429c      	cmp	r4, r3
 8002d82:	bf08      	it	eq
 8002d84:	68ec      	ldreq	r4, [r5, #12]
 8002d86:	e7da      	b.n	8002d3e <_fflush_r+0x22>
 8002d88:	08004d34 	.word	0x08004d34
 8002d8c:	08004d54 	.word	0x08004d54
 8002d90:	08004d14 	.word	0x08004d14

08002d94 <std>:
 8002d94:	2300      	movs	r3, #0
 8002d96:	b510      	push	{r4, lr}
 8002d98:	4604      	mov	r4, r0
 8002d9a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002da2:	6083      	str	r3, [r0, #8]
 8002da4:	8181      	strh	r1, [r0, #12]
 8002da6:	6643      	str	r3, [r0, #100]	; 0x64
 8002da8:	81c2      	strh	r2, [r0, #14]
 8002daa:	6183      	str	r3, [r0, #24]
 8002dac:	4619      	mov	r1, r3
 8002dae:	2208      	movs	r2, #8
 8002db0:	305c      	adds	r0, #92	; 0x5c
 8002db2:	f7ff fb5f 	bl	8002474 <memset>
 8002db6:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <std+0x38>)
 8002db8:	6224      	str	r4, [r4, #32]
 8002dba:	6263      	str	r3, [r4, #36]	; 0x24
 8002dbc:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <std+0x3c>)
 8002dbe:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <std+0x40>)
 8002dc2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002dc4:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <std+0x44>)
 8002dc6:	6323      	str	r3, [r4, #48]	; 0x30
 8002dc8:	bd10      	pop	{r4, pc}
 8002dca:	bf00      	nop
 8002dcc:	08003415 	.word	0x08003415
 8002dd0:	08003437 	.word	0x08003437
 8002dd4:	0800346f 	.word	0x0800346f
 8002dd8:	08003493 	.word	0x08003493

08002ddc <_cleanup_r>:
 8002ddc:	4901      	ldr	r1, [pc, #4]	; (8002de4 <_cleanup_r+0x8>)
 8002dde:	f000 b8af 	b.w	8002f40 <_fwalk_reent>
 8002de2:	bf00      	nop
 8002de4:	08002d1d 	.word	0x08002d1d

08002de8 <__sfmoreglue>:
 8002de8:	2368      	movs	r3, #104	; 0x68
 8002dea:	b570      	push	{r4, r5, r6, lr}
 8002dec:	1e4d      	subs	r5, r1, #1
 8002dee:	435d      	muls	r5, r3
 8002df0:	460e      	mov	r6, r1
 8002df2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002df6:	f7ff fb79 	bl	80024ec <_malloc_r>
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	b140      	cbz	r0, 8002e10 <__sfmoreglue+0x28>
 8002dfe:	2100      	movs	r1, #0
 8002e00:	e9c0 1600 	strd	r1, r6, [r0]
 8002e04:	300c      	adds	r0, #12
 8002e06:	60a0      	str	r0, [r4, #8]
 8002e08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002e0c:	f7ff fb32 	bl	8002474 <memset>
 8002e10:	4620      	mov	r0, r4
 8002e12:	bd70      	pop	{r4, r5, r6, pc}

08002e14 <__sfp_lock_acquire>:
 8002e14:	4801      	ldr	r0, [pc, #4]	; (8002e1c <__sfp_lock_acquire+0x8>)
 8002e16:	f7ff bc82 	b.w	800271e <__retarget_lock_acquire_recursive>
 8002e1a:	bf00      	nop
 8002e1c:	200004a5 	.word	0x200004a5

08002e20 <__sfp_lock_release>:
 8002e20:	4801      	ldr	r0, [pc, #4]	; (8002e28 <__sfp_lock_release+0x8>)
 8002e22:	f7ff bc7d 	b.w	8002720 <__retarget_lock_release_recursive>
 8002e26:	bf00      	nop
 8002e28:	200004a5 	.word	0x200004a5

08002e2c <__sinit_lock_acquire>:
 8002e2c:	4801      	ldr	r0, [pc, #4]	; (8002e34 <__sinit_lock_acquire+0x8>)
 8002e2e:	f7ff bc76 	b.w	800271e <__retarget_lock_acquire_recursive>
 8002e32:	bf00      	nop
 8002e34:	200004a6 	.word	0x200004a6

08002e38 <__sinit_lock_release>:
 8002e38:	4801      	ldr	r0, [pc, #4]	; (8002e40 <__sinit_lock_release+0x8>)
 8002e3a:	f7ff bc71 	b.w	8002720 <__retarget_lock_release_recursive>
 8002e3e:	bf00      	nop
 8002e40:	200004a6 	.word	0x200004a6

08002e44 <__sinit>:
 8002e44:	b510      	push	{r4, lr}
 8002e46:	4604      	mov	r4, r0
 8002e48:	f7ff fff0 	bl	8002e2c <__sinit_lock_acquire>
 8002e4c:	69a3      	ldr	r3, [r4, #24]
 8002e4e:	b11b      	cbz	r3, 8002e58 <__sinit+0x14>
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e54:	f7ff bff0 	b.w	8002e38 <__sinit_lock_release>
 8002e58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002e5c:	6523      	str	r3, [r4, #80]	; 0x50
 8002e5e:	4b13      	ldr	r3, [pc, #76]	; (8002eac <__sinit+0x68>)
 8002e60:	4a13      	ldr	r2, [pc, #76]	; (8002eb0 <__sinit+0x6c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	62a2      	str	r2, [r4, #40]	; 0x28
 8002e66:	42a3      	cmp	r3, r4
 8002e68:	bf08      	it	eq
 8002e6a:	2301      	moveq	r3, #1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	bf08      	it	eq
 8002e70:	61a3      	streq	r3, [r4, #24]
 8002e72:	f000 f81f 	bl	8002eb4 <__sfp>
 8002e76:	6060      	str	r0, [r4, #4]
 8002e78:	4620      	mov	r0, r4
 8002e7a:	f000 f81b 	bl	8002eb4 <__sfp>
 8002e7e:	60a0      	str	r0, [r4, #8]
 8002e80:	4620      	mov	r0, r4
 8002e82:	f000 f817 	bl	8002eb4 <__sfp>
 8002e86:	2200      	movs	r2, #0
 8002e88:	2104      	movs	r1, #4
 8002e8a:	60e0      	str	r0, [r4, #12]
 8002e8c:	6860      	ldr	r0, [r4, #4]
 8002e8e:	f7ff ff81 	bl	8002d94 <std>
 8002e92:	2201      	movs	r2, #1
 8002e94:	2109      	movs	r1, #9
 8002e96:	68a0      	ldr	r0, [r4, #8]
 8002e98:	f7ff ff7c 	bl	8002d94 <std>
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	2112      	movs	r1, #18
 8002ea0:	68e0      	ldr	r0, [r4, #12]
 8002ea2:	f7ff ff77 	bl	8002d94 <std>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61a3      	str	r3, [r4, #24]
 8002eaa:	e7d1      	b.n	8002e50 <__sinit+0xc>
 8002eac:	08004c64 	.word	0x08004c64
 8002eb0:	08002ddd 	.word	0x08002ddd

08002eb4 <__sfp>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	4607      	mov	r7, r0
 8002eb8:	f7ff ffac 	bl	8002e14 <__sfp_lock_acquire>
 8002ebc:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <__sfp+0x84>)
 8002ebe:	681e      	ldr	r6, [r3, #0]
 8002ec0:	69b3      	ldr	r3, [r6, #24]
 8002ec2:	b913      	cbnz	r3, 8002eca <__sfp+0x16>
 8002ec4:	4630      	mov	r0, r6
 8002ec6:	f7ff ffbd 	bl	8002e44 <__sinit>
 8002eca:	3648      	adds	r6, #72	; 0x48
 8002ecc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	d503      	bpl.n	8002edc <__sfp+0x28>
 8002ed4:	6833      	ldr	r3, [r6, #0]
 8002ed6:	b30b      	cbz	r3, 8002f1c <__sfp+0x68>
 8002ed8:	6836      	ldr	r6, [r6, #0]
 8002eda:	e7f7      	b.n	8002ecc <__sfp+0x18>
 8002edc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002ee0:	b9d5      	cbnz	r5, 8002f18 <__sfp+0x64>
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <__sfp+0x88>)
 8002ee4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002ee8:	60e3      	str	r3, [r4, #12]
 8002eea:	6665      	str	r5, [r4, #100]	; 0x64
 8002eec:	f7ff fc16 	bl	800271c <__retarget_lock_init_recursive>
 8002ef0:	f7ff ff96 	bl	8002e20 <__sfp_lock_release>
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	4629      	mov	r1, r5
 8002ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002f00:	6025      	str	r5, [r4, #0]
 8002f02:	61a5      	str	r5, [r4, #24]
 8002f04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002f08:	f7ff fab4 	bl	8002474 <memset>
 8002f0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002f10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002f14:	4620      	mov	r0, r4
 8002f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f18:	3468      	adds	r4, #104	; 0x68
 8002f1a:	e7d9      	b.n	8002ed0 <__sfp+0x1c>
 8002f1c:	2104      	movs	r1, #4
 8002f1e:	4638      	mov	r0, r7
 8002f20:	f7ff ff62 	bl	8002de8 <__sfmoreglue>
 8002f24:	4604      	mov	r4, r0
 8002f26:	6030      	str	r0, [r6, #0]
 8002f28:	2800      	cmp	r0, #0
 8002f2a:	d1d5      	bne.n	8002ed8 <__sfp+0x24>
 8002f2c:	f7ff ff78 	bl	8002e20 <__sfp_lock_release>
 8002f30:	230c      	movs	r3, #12
 8002f32:	603b      	str	r3, [r7, #0]
 8002f34:	e7ee      	b.n	8002f14 <__sfp+0x60>
 8002f36:	bf00      	nop
 8002f38:	08004c64 	.word	0x08004c64
 8002f3c:	ffff0001 	.word	0xffff0001

08002f40 <_fwalk_reent>:
 8002f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f44:	4606      	mov	r6, r0
 8002f46:	4688      	mov	r8, r1
 8002f48:	2700      	movs	r7, #0
 8002f4a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002f4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002f52:	f1b9 0901 	subs.w	r9, r9, #1
 8002f56:	d505      	bpl.n	8002f64 <_fwalk_reent+0x24>
 8002f58:	6824      	ldr	r4, [r4, #0]
 8002f5a:	2c00      	cmp	r4, #0
 8002f5c:	d1f7      	bne.n	8002f4e <_fwalk_reent+0xe>
 8002f5e:	4638      	mov	r0, r7
 8002f60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f64:	89ab      	ldrh	r3, [r5, #12]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d907      	bls.n	8002f7a <_fwalk_reent+0x3a>
 8002f6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	d003      	beq.n	8002f7a <_fwalk_reent+0x3a>
 8002f72:	4629      	mov	r1, r5
 8002f74:	4630      	mov	r0, r6
 8002f76:	47c0      	blx	r8
 8002f78:	4307      	orrs	r7, r0
 8002f7a:	3568      	adds	r5, #104	; 0x68
 8002f7c:	e7e9      	b.n	8002f52 <_fwalk_reent+0x12>

08002f7e <__swhatbuf_r>:
 8002f7e:	b570      	push	{r4, r5, r6, lr}
 8002f80:	460c      	mov	r4, r1
 8002f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f86:	4615      	mov	r5, r2
 8002f88:	2900      	cmp	r1, #0
 8002f8a:	461e      	mov	r6, r3
 8002f8c:	b096      	sub	sp, #88	; 0x58
 8002f8e:	da0c      	bge.n	8002faa <__swhatbuf_r+0x2c>
 8002f90:	89a3      	ldrh	r3, [r4, #12]
 8002f92:	2100      	movs	r1, #0
 8002f94:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002f98:	bf0c      	ite	eq
 8002f9a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8002f9e:	2340      	movne	r3, #64	; 0x40
 8002fa0:	2000      	movs	r0, #0
 8002fa2:	6031      	str	r1, [r6, #0]
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	b016      	add	sp, #88	; 0x58
 8002fa8:	bd70      	pop	{r4, r5, r6, pc}
 8002faa:	466a      	mov	r2, sp
 8002fac:	f000 fa98 	bl	80034e0 <_fstat_r>
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	dbed      	blt.n	8002f90 <__swhatbuf_r+0x12>
 8002fb4:	9901      	ldr	r1, [sp, #4]
 8002fb6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8002fba:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8002fbe:	4259      	negs	r1, r3
 8002fc0:	4159      	adcs	r1, r3
 8002fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fc6:	e7eb      	b.n	8002fa0 <__swhatbuf_r+0x22>

08002fc8 <__smakebuf_r>:
 8002fc8:	898b      	ldrh	r3, [r1, #12]
 8002fca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002fcc:	079d      	lsls	r5, r3, #30
 8002fce:	4606      	mov	r6, r0
 8002fd0:	460c      	mov	r4, r1
 8002fd2:	d507      	bpl.n	8002fe4 <__smakebuf_r+0x1c>
 8002fd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	6123      	str	r3, [r4, #16]
 8002fdc:	2301      	movs	r3, #1
 8002fde:	6163      	str	r3, [r4, #20]
 8002fe0:	b002      	add	sp, #8
 8002fe2:	bd70      	pop	{r4, r5, r6, pc}
 8002fe4:	466a      	mov	r2, sp
 8002fe6:	ab01      	add	r3, sp, #4
 8002fe8:	f7ff ffc9 	bl	8002f7e <__swhatbuf_r>
 8002fec:	9900      	ldr	r1, [sp, #0]
 8002fee:	4605      	mov	r5, r0
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	f7ff fa7b 	bl	80024ec <_malloc_r>
 8002ff6:	b948      	cbnz	r0, 800300c <__smakebuf_r+0x44>
 8002ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ffc:	059a      	lsls	r2, r3, #22
 8002ffe:	d4ef      	bmi.n	8002fe0 <__smakebuf_r+0x18>
 8003000:	f023 0303 	bic.w	r3, r3, #3
 8003004:	f043 0302 	orr.w	r3, r3, #2
 8003008:	81a3      	strh	r3, [r4, #12]
 800300a:	e7e3      	b.n	8002fd4 <__smakebuf_r+0xc>
 800300c:	4b0d      	ldr	r3, [pc, #52]	; (8003044 <__smakebuf_r+0x7c>)
 800300e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003010:	89a3      	ldrh	r3, [r4, #12]
 8003012:	6020      	str	r0, [r4, #0]
 8003014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003018:	81a3      	strh	r3, [r4, #12]
 800301a:	9b00      	ldr	r3, [sp, #0]
 800301c:	6120      	str	r0, [r4, #16]
 800301e:	6163      	str	r3, [r4, #20]
 8003020:	9b01      	ldr	r3, [sp, #4]
 8003022:	b15b      	cbz	r3, 800303c <__smakebuf_r+0x74>
 8003024:	4630      	mov	r0, r6
 8003026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800302a:	f000 fa6b 	bl	8003504 <_isatty_r>
 800302e:	b128      	cbz	r0, 800303c <__smakebuf_r+0x74>
 8003030:	89a3      	ldrh	r3, [r4, #12]
 8003032:	f023 0303 	bic.w	r3, r3, #3
 8003036:	f043 0301 	orr.w	r3, r3, #1
 800303a:	81a3      	strh	r3, [r4, #12]
 800303c:	89a3      	ldrh	r3, [r4, #12]
 800303e:	431d      	orrs	r5, r3
 8003040:	81a5      	strh	r5, [r4, #12]
 8003042:	e7cd      	b.n	8002fe0 <__smakebuf_r+0x18>
 8003044:	08002ddd 	.word	0x08002ddd

08003048 <memchr>:
 8003048:	4603      	mov	r3, r0
 800304a:	b510      	push	{r4, lr}
 800304c:	b2c9      	uxtb	r1, r1
 800304e:	4402      	add	r2, r0
 8003050:	4293      	cmp	r3, r2
 8003052:	4618      	mov	r0, r3
 8003054:	d101      	bne.n	800305a <memchr+0x12>
 8003056:	2000      	movs	r0, #0
 8003058:	e003      	b.n	8003062 <memchr+0x1a>
 800305a:	7804      	ldrb	r4, [r0, #0]
 800305c:	3301      	adds	r3, #1
 800305e:	428c      	cmp	r4, r1
 8003060:	d1f6      	bne.n	8003050 <memchr+0x8>
 8003062:	bd10      	pop	{r4, pc}

08003064 <_printf_common>:
 8003064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003068:	4616      	mov	r6, r2
 800306a:	4699      	mov	r9, r3
 800306c:	688a      	ldr	r2, [r1, #8]
 800306e:	690b      	ldr	r3, [r1, #16]
 8003070:	4607      	mov	r7, r0
 8003072:	4293      	cmp	r3, r2
 8003074:	bfb8      	it	lt
 8003076:	4613      	movlt	r3, r2
 8003078:	6033      	str	r3, [r6, #0]
 800307a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800307e:	460c      	mov	r4, r1
 8003080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003084:	b10a      	cbz	r2, 800308a <_printf_common+0x26>
 8003086:	3301      	adds	r3, #1
 8003088:	6033      	str	r3, [r6, #0]
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	0699      	lsls	r1, r3, #26
 800308e:	bf42      	ittt	mi
 8003090:	6833      	ldrmi	r3, [r6, #0]
 8003092:	3302      	addmi	r3, #2
 8003094:	6033      	strmi	r3, [r6, #0]
 8003096:	6825      	ldr	r5, [r4, #0]
 8003098:	f015 0506 	ands.w	r5, r5, #6
 800309c:	d106      	bne.n	80030ac <_printf_common+0x48>
 800309e:	f104 0a19 	add.w	sl, r4, #25
 80030a2:	68e3      	ldr	r3, [r4, #12]
 80030a4:	6832      	ldr	r2, [r6, #0]
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	42ab      	cmp	r3, r5
 80030aa:	dc2b      	bgt.n	8003104 <_printf_common+0xa0>
 80030ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80030b0:	1e13      	subs	r3, r2, #0
 80030b2:	6822      	ldr	r2, [r4, #0]
 80030b4:	bf18      	it	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	0692      	lsls	r2, r2, #26
 80030ba:	d430      	bmi.n	800311e <_printf_common+0xba>
 80030bc:	4649      	mov	r1, r9
 80030be:	4638      	mov	r0, r7
 80030c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80030c4:	47c0      	blx	r8
 80030c6:	3001      	adds	r0, #1
 80030c8:	d023      	beq.n	8003112 <_printf_common+0xae>
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	6922      	ldr	r2, [r4, #16]
 80030ce:	f003 0306 	and.w	r3, r3, #6
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	bf14      	ite	ne
 80030d6:	2500      	movne	r5, #0
 80030d8:	6833      	ldreq	r3, [r6, #0]
 80030da:	f04f 0600 	mov.w	r6, #0
 80030de:	bf08      	it	eq
 80030e0:	68e5      	ldreq	r5, [r4, #12]
 80030e2:	f104 041a 	add.w	r4, r4, #26
 80030e6:	bf08      	it	eq
 80030e8:	1aed      	subeq	r5, r5, r3
 80030ea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80030ee:	bf08      	it	eq
 80030f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80030f4:	4293      	cmp	r3, r2
 80030f6:	bfc4      	itt	gt
 80030f8:	1a9b      	subgt	r3, r3, r2
 80030fa:	18ed      	addgt	r5, r5, r3
 80030fc:	42b5      	cmp	r5, r6
 80030fe:	d11a      	bne.n	8003136 <_printf_common+0xd2>
 8003100:	2000      	movs	r0, #0
 8003102:	e008      	b.n	8003116 <_printf_common+0xb2>
 8003104:	2301      	movs	r3, #1
 8003106:	4652      	mov	r2, sl
 8003108:	4649      	mov	r1, r9
 800310a:	4638      	mov	r0, r7
 800310c:	47c0      	blx	r8
 800310e:	3001      	adds	r0, #1
 8003110:	d103      	bne.n	800311a <_printf_common+0xb6>
 8003112:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800311a:	3501      	adds	r5, #1
 800311c:	e7c1      	b.n	80030a2 <_printf_common+0x3e>
 800311e:	2030      	movs	r0, #48	; 0x30
 8003120:	18e1      	adds	r1, r4, r3
 8003122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003126:	1c5a      	adds	r2, r3, #1
 8003128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800312c:	4422      	add	r2, r4
 800312e:	3302      	adds	r3, #2
 8003130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003134:	e7c2      	b.n	80030bc <_printf_common+0x58>
 8003136:	2301      	movs	r3, #1
 8003138:	4622      	mov	r2, r4
 800313a:	4649      	mov	r1, r9
 800313c:	4638      	mov	r0, r7
 800313e:	47c0      	blx	r8
 8003140:	3001      	adds	r0, #1
 8003142:	d0e6      	beq.n	8003112 <_printf_common+0xae>
 8003144:	3601      	adds	r6, #1
 8003146:	e7d9      	b.n	80030fc <_printf_common+0x98>

08003148 <_printf_i>:
 8003148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800314c:	7e0f      	ldrb	r7, [r1, #24]
 800314e:	4691      	mov	r9, r2
 8003150:	2f78      	cmp	r7, #120	; 0x78
 8003152:	4680      	mov	r8, r0
 8003154:	460c      	mov	r4, r1
 8003156:	469a      	mov	sl, r3
 8003158:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800315a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800315e:	d807      	bhi.n	8003170 <_printf_i+0x28>
 8003160:	2f62      	cmp	r7, #98	; 0x62
 8003162:	d80a      	bhi.n	800317a <_printf_i+0x32>
 8003164:	2f00      	cmp	r7, #0
 8003166:	f000 80d5 	beq.w	8003314 <_printf_i+0x1cc>
 800316a:	2f58      	cmp	r7, #88	; 0x58
 800316c:	f000 80c1 	beq.w	80032f2 <_printf_i+0x1aa>
 8003170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003178:	e03a      	b.n	80031f0 <_printf_i+0xa8>
 800317a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800317e:	2b15      	cmp	r3, #21
 8003180:	d8f6      	bhi.n	8003170 <_printf_i+0x28>
 8003182:	a101      	add	r1, pc, #4	; (adr r1, 8003188 <_printf_i+0x40>)
 8003184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003188:	080031e1 	.word	0x080031e1
 800318c:	080031f5 	.word	0x080031f5
 8003190:	08003171 	.word	0x08003171
 8003194:	08003171 	.word	0x08003171
 8003198:	08003171 	.word	0x08003171
 800319c:	08003171 	.word	0x08003171
 80031a0:	080031f5 	.word	0x080031f5
 80031a4:	08003171 	.word	0x08003171
 80031a8:	08003171 	.word	0x08003171
 80031ac:	08003171 	.word	0x08003171
 80031b0:	08003171 	.word	0x08003171
 80031b4:	080032fb 	.word	0x080032fb
 80031b8:	08003221 	.word	0x08003221
 80031bc:	080032b5 	.word	0x080032b5
 80031c0:	08003171 	.word	0x08003171
 80031c4:	08003171 	.word	0x08003171
 80031c8:	0800331d 	.word	0x0800331d
 80031cc:	08003171 	.word	0x08003171
 80031d0:	08003221 	.word	0x08003221
 80031d4:	08003171 	.word	0x08003171
 80031d8:	08003171 	.word	0x08003171
 80031dc:	080032bd 	.word	0x080032bd
 80031e0:	682b      	ldr	r3, [r5, #0]
 80031e2:	1d1a      	adds	r2, r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	602a      	str	r2, [r5, #0]
 80031e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80031ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0a0      	b.n	8003336 <_printf_i+0x1ee>
 80031f4:	6820      	ldr	r0, [r4, #0]
 80031f6:	682b      	ldr	r3, [r5, #0]
 80031f8:	0607      	lsls	r7, r0, #24
 80031fa:	f103 0104 	add.w	r1, r3, #4
 80031fe:	6029      	str	r1, [r5, #0]
 8003200:	d501      	bpl.n	8003206 <_printf_i+0xbe>
 8003202:	681e      	ldr	r6, [r3, #0]
 8003204:	e003      	b.n	800320e <_printf_i+0xc6>
 8003206:	0646      	lsls	r6, r0, #25
 8003208:	d5fb      	bpl.n	8003202 <_printf_i+0xba>
 800320a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800320e:	2e00      	cmp	r6, #0
 8003210:	da03      	bge.n	800321a <_printf_i+0xd2>
 8003212:	232d      	movs	r3, #45	; 0x2d
 8003214:	4276      	negs	r6, r6
 8003216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800321a:	230a      	movs	r3, #10
 800321c:	4859      	ldr	r0, [pc, #356]	; (8003384 <_printf_i+0x23c>)
 800321e:	e012      	b.n	8003246 <_printf_i+0xfe>
 8003220:	682b      	ldr	r3, [r5, #0]
 8003222:	6820      	ldr	r0, [r4, #0]
 8003224:	1d19      	adds	r1, r3, #4
 8003226:	6029      	str	r1, [r5, #0]
 8003228:	0605      	lsls	r5, r0, #24
 800322a:	d501      	bpl.n	8003230 <_printf_i+0xe8>
 800322c:	681e      	ldr	r6, [r3, #0]
 800322e:	e002      	b.n	8003236 <_printf_i+0xee>
 8003230:	0641      	lsls	r1, r0, #25
 8003232:	d5fb      	bpl.n	800322c <_printf_i+0xe4>
 8003234:	881e      	ldrh	r6, [r3, #0]
 8003236:	2f6f      	cmp	r7, #111	; 0x6f
 8003238:	bf0c      	ite	eq
 800323a:	2308      	moveq	r3, #8
 800323c:	230a      	movne	r3, #10
 800323e:	4851      	ldr	r0, [pc, #324]	; (8003384 <_printf_i+0x23c>)
 8003240:	2100      	movs	r1, #0
 8003242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003246:	6865      	ldr	r5, [r4, #4]
 8003248:	2d00      	cmp	r5, #0
 800324a:	bfa8      	it	ge
 800324c:	6821      	ldrge	r1, [r4, #0]
 800324e:	60a5      	str	r5, [r4, #8]
 8003250:	bfa4      	itt	ge
 8003252:	f021 0104 	bicge.w	r1, r1, #4
 8003256:	6021      	strge	r1, [r4, #0]
 8003258:	b90e      	cbnz	r6, 800325e <_printf_i+0x116>
 800325a:	2d00      	cmp	r5, #0
 800325c:	d04b      	beq.n	80032f6 <_printf_i+0x1ae>
 800325e:	4615      	mov	r5, r2
 8003260:	fbb6 f1f3 	udiv	r1, r6, r3
 8003264:	fb03 6711 	mls	r7, r3, r1, r6
 8003268:	5dc7      	ldrb	r7, [r0, r7]
 800326a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800326e:	4637      	mov	r7, r6
 8003270:	42bb      	cmp	r3, r7
 8003272:	460e      	mov	r6, r1
 8003274:	d9f4      	bls.n	8003260 <_printf_i+0x118>
 8003276:	2b08      	cmp	r3, #8
 8003278:	d10b      	bne.n	8003292 <_printf_i+0x14a>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	07de      	lsls	r6, r3, #31
 800327e:	d508      	bpl.n	8003292 <_printf_i+0x14a>
 8003280:	6923      	ldr	r3, [r4, #16]
 8003282:	6861      	ldr	r1, [r4, #4]
 8003284:	4299      	cmp	r1, r3
 8003286:	bfde      	ittt	le
 8003288:	2330      	movle	r3, #48	; 0x30
 800328a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800328e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003292:	1b52      	subs	r2, r2, r5
 8003294:	6122      	str	r2, [r4, #16]
 8003296:	464b      	mov	r3, r9
 8003298:	4621      	mov	r1, r4
 800329a:	4640      	mov	r0, r8
 800329c:	f8cd a000 	str.w	sl, [sp]
 80032a0:	aa03      	add	r2, sp, #12
 80032a2:	f7ff fedf 	bl	8003064 <_printf_common>
 80032a6:	3001      	adds	r0, #1
 80032a8:	d14a      	bne.n	8003340 <_printf_i+0x1f8>
 80032aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80032ae:	b004      	add	sp, #16
 80032b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b4:	6823      	ldr	r3, [r4, #0]
 80032b6:	f043 0320 	orr.w	r3, r3, #32
 80032ba:	6023      	str	r3, [r4, #0]
 80032bc:	2778      	movs	r7, #120	; 0x78
 80032be:	4832      	ldr	r0, [pc, #200]	; (8003388 <_printf_i+0x240>)
 80032c0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80032c4:	6823      	ldr	r3, [r4, #0]
 80032c6:	6829      	ldr	r1, [r5, #0]
 80032c8:	061f      	lsls	r7, r3, #24
 80032ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80032ce:	d402      	bmi.n	80032d6 <_printf_i+0x18e>
 80032d0:	065f      	lsls	r7, r3, #25
 80032d2:	bf48      	it	mi
 80032d4:	b2b6      	uxthmi	r6, r6
 80032d6:	07df      	lsls	r7, r3, #31
 80032d8:	bf48      	it	mi
 80032da:	f043 0320 	orrmi.w	r3, r3, #32
 80032de:	6029      	str	r1, [r5, #0]
 80032e0:	bf48      	it	mi
 80032e2:	6023      	strmi	r3, [r4, #0]
 80032e4:	b91e      	cbnz	r6, 80032ee <_printf_i+0x1a6>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	f023 0320 	bic.w	r3, r3, #32
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	2310      	movs	r3, #16
 80032f0:	e7a6      	b.n	8003240 <_printf_i+0xf8>
 80032f2:	4824      	ldr	r0, [pc, #144]	; (8003384 <_printf_i+0x23c>)
 80032f4:	e7e4      	b.n	80032c0 <_printf_i+0x178>
 80032f6:	4615      	mov	r5, r2
 80032f8:	e7bd      	b.n	8003276 <_printf_i+0x12e>
 80032fa:	682b      	ldr	r3, [r5, #0]
 80032fc:	6826      	ldr	r6, [r4, #0]
 80032fe:	1d18      	adds	r0, r3, #4
 8003300:	6961      	ldr	r1, [r4, #20]
 8003302:	6028      	str	r0, [r5, #0]
 8003304:	0635      	lsls	r5, r6, #24
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	d501      	bpl.n	800330e <_printf_i+0x1c6>
 800330a:	6019      	str	r1, [r3, #0]
 800330c:	e002      	b.n	8003314 <_printf_i+0x1cc>
 800330e:	0670      	lsls	r0, r6, #25
 8003310:	d5fb      	bpl.n	800330a <_printf_i+0x1c2>
 8003312:	8019      	strh	r1, [r3, #0]
 8003314:	2300      	movs	r3, #0
 8003316:	4615      	mov	r5, r2
 8003318:	6123      	str	r3, [r4, #16]
 800331a:	e7bc      	b.n	8003296 <_printf_i+0x14e>
 800331c:	682b      	ldr	r3, [r5, #0]
 800331e:	2100      	movs	r1, #0
 8003320:	1d1a      	adds	r2, r3, #4
 8003322:	602a      	str	r2, [r5, #0]
 8003324:	681d      	ldr	r5, [r3, #0]
 8003326:	6862      	ldr	r2, [r4, #4]
 8003328:	4628      	mov	r0, r5
 800332a:	f7ff fe8d 	bl	8003048 <memchr>
 800332e:	b108      	cbz	r0, 8003334 <_printf_i+0x1ec>
 8003330:	1b40      	subs	r0, r0, r5
 8003332:	6060      	str	r0, [r4, #4]
 8003334:	6863      	ldr	r3, [r4, #4]
 8003336:	6123      	str	r3, [r4, #16]
 8003338:	2300      	movs	r3, #0
 800333a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800333e:	e7aa      	b.n	8003296 <_printf_i+0x14e>
 8003340:	462a      	mov	r2, r5
 8003342:	4649      	mov	r1, r9
 8003344:	4640      	mov	r0, r8
 8003346:	6923      	ldr	r3, [r4, #16]
 8003348:	47d0      	blx	sl
 800334a:	3001      	adds	r0, #1
 800334c:	d0ad      	beq.n	80032aa <_printf_i+0x162>
 800334e:	6823      	ldr	r3, [r4, #0]
 8003350:	079b      	lsls	r3, r3, #30
 8003352:	d413      	bmi.n	800337c <_printf_i+0x234>
 8003354:	68e0      	ldr	r0, [r4, #12]
 8003356:	9b03      	ldr	r3, [sp, #12]
 8003358:	4298      	cmp	r0, r3
 800335a:	bfb8      	it	lt
 800335c:	4618      	movlt	r0, r3
 800335e:	e7a6      	b.n	80032ae <_printf_i+0x166>
 8003360:	2301      	movs	r3, #1
 8003362:	4632      	mov	r2, r6
 8003364:	4649      	mov	r1, r9
 8003366:	4640      	mov	r0, r8
 8003368:	47d0      	blx	sl
 800336a:	3001      	adds	r0, #1
 800336c:	d09d      	beq.n	80032aa <_printf_i+0x162>
 800336e:	3501      	adds	r5, #1
 8003370:	68e3      	ldr	r3, [r4, #12]
 8003372:	9903      	ldr	r1, [sp, #12]
 8003374:	1a5b      	subs	r3, r3, r1
 8003376:	42ab      	cmp	r3, r5
 8003378:	dcf2      	bgt.n	8003360 <_printf_i+0x218>
 800337a:	e7eb      	b.n	8003354 <_printf_i+0x20c>
 800337c:	2500      	movs	r5, #0
 800337e:	f104 0619 	add.w	r6, r4, #25
 8003382:	e7f5      	b.n	8003370 <_printf_i+0x228>
 8003384:	08004d74 	.word	0x08004d74
 8003388:	08004d85 	.word	0x08004d85

0800338c <_raise_r>:
 800338c:	291f      	cmp	r1, #31
 800338e:	b538      	push	{r3, r4, r5, lr}
 8003390:	4604      	mov	r4, r0
 8003392:	460d      	mov	r5, r1
 8003394:	d904      	bls.n	80033a0 <_raise_r+0x14>
 8003396:	2316      	movs	r3, #22
 8003398:	6003      	str	r3, [r0, #0]
 800339a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800339e:	bd38      	pop	{r3, r4, r5, pc}
 80033a0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80033a2:	b112      	cbz	r2, 80033aa <_raise_r+0x1e>
 80033a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80033a8:	b94b      	cbnz	r3, 80033be <_raise_r+0x32>
 80033aa:	4620      	mov	r0, r4
 80033ac:	f000 f830 	bl	8003410 <_getpid_r>
 80033b0:	462a      	mov	r2, r5
 80033b2:	4601      	mov	r1, r0
 80033b4:	4620      	mov	r0, r4
 80033b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80033ba:	f000 b817 	b.w	80033ec <_kill_r>
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00a      	beq.n	80033d8 <_raise_r+0x4c>
 80033c2:	1c59      	adds	r1, r3, #1
 80033c4:	d103      	bne.n	80033ce <_raise_r+0x42>
 80033c6:	2316      	movs	r3, #22
 80033c8:	6003      	str	r3, [r0, #0]
 80033ca:	2001      	movs	r0, #1
 80033cc:	e7e7      	b.n	800339e <_raise_r+0x12>
 80033ce:	2400      	movs	r4, #0
 80033d0:	4628      	mov	r0, r5
 80033d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80033d6:	4798      	blx	r3
 80033d8:	2000      	movs	r0, #0
 80033da:	e7e0      	b.n	800339e <_raise_r+0x12>

080033dc <raise>:
 80033dc:	4b02      	ldr	r3, [pc, #8]	; (80033e8 <raise+0xc>)
 80033de:	4601      	mov	r1, r0
 80033e0:	6818      	ldr	r0, [r3, #0]
 80033e2:	f7ff bfd3 	b.w	800338c <_raise_r>
 80033e6:	bf00      	nop
 80033e8:	2000000c 	.word	0x2000000c

080033ec <_kill_r>:
 80033ec:	b538      	push	{r3, r4, r5, lr}
 80033ee:	2300      	movs	r3, #0
 80033f0:	4d06      	ldr	r5, [pc, #24]	; (800340c <_kill_r+0x20>)
 80033f2:	4604      	mov	r4, r0
 80033f4:	4608      	mov	r0, r1
 80033f6:	4611      	mov	r1, r2
 80033f8:	602b      	str	r3, [r5, #0]
 80033fa:	f7fd fb06 	bl	8000a0a <_kill>
 80033fe:	1c43      	adds	r3, r0, #1
 8003400:	d102      	bne.n	8003408 <_kill_r+0x1c>
 8003402:	682b      	ldr	r3, [r5, #0]
 8003404:	b103      	cbz	r3, 8003408 <_kill_r+0x1c>
 8003406:	6023      	str	r3, [r4, #0]
 8003408:	bd38      	pop	{r3, r4, r5, pc}
 800340a:	bf00      	nop
 800340c:	200004a8 	.word	0x200004a8

08003410 <_getpid_r>:
 8003410:	f7fd baf4 	b.w	80009fc <_getpid>

08003414 <__sread>:
 8003414:	b510      	push	{r4, lr}
 8003416:	460c      	mov	r4, r1
 8003418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800341c:	f000 f894 	bl	8003548 <_read_r>
 8003420:	2800      	cmp	r0, #0
 8003422:	bfab      	itete	ge
 8003424:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003426:	89a3      	ldrhlt	r3, [r4, #12]
 8003428:	181b      	addge	r3, r3, r0
 800342a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800342e:	bfac      	ite	ge
 8003430:	6563      	strge	r3, [r4, #84]	; 0x54
 8003432:	81a3      	strhlt	r3, [r4, #12]
 8003434:	bd10      	pop	{r4, pc}

08003436 <__swrite>:
 8003436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343a:	461f      	mov	r7, r3
 800343c:	898b      	ldrh	r3, [r1, #12]
 800343e:	4605      	mov	r5, r0
 8003440:	05db      	lsls	r3, r3, #23
 8003442:	460c      	mov	r4, r1
 8003444:	4616      	mov	r6, r2
 8003446:	d505      	bpl.n	8003454 <__swrite+0x1e>
 8003448:	2302      	movs	r3, #2
 800344a:	2200      	movs	r2, #0
 800344c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003450:	f000 f868 	bl	8003524 <_lseek_r>
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	4632      	mov	r2, r6
 8003458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800345c:	81a3      	strh	r3, [r4, #12]
 800345e:	4628      	mov	r0, r5
 8003460:	463b      	mov	r3, r7
 8003462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800346a:	f000 b817 	b.w	800349c <_write_r>

0800346e <__sseek>:
 800346e:	b510      	push	{r4, lr}
 8003470:	460c      	mov	r4, r1
 8003472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003476:	f000 f855 	bl	8003524 <_lseek_r>
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	bf15      	itete	ne
 8003480:	6560      	strne	r0, [r4, #84]	; 0x54
 8003482:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003486:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800348a:	81a3      	strheq	r3, [r4, #12]
 800348c:	bf18      	it	ne
 800348e:	81a3      	strhne	r3, [r4, #12]
 8003490:	bd10      	pop	{r4, pc}

08003492 <__sclose>:
 8003492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003496:	f000 b813 	b.w	80034c0 <_close_r>
	...

0800349c <_write_r>:
 800349c:	b538      	push	{r3, r4, r5, lr}
 800349e:	4604      	mov	r4, r0
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	2200      	movs	r2, #0
 80034a6:	4d05      	ldr	r5, [pc, #20]	; (80034bc <_write_r+0x20>)
 80034a8:	602a      	str	r2, [r5, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f7fd fae5 	bl	8000a7a <_write>
 80034b0:	1c43      	adds	r3, r0, #1
 80034b2:	d102      	bne.n	80034ba <_write_r+0x1e>
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	b103      	cbz	r3, 80034ba <_write_r+0x1e>
 80034b8:	6023      	str	r3, [r4, #0]
 80034ba:	bd38      	pop	{r3, r4, r5, pc}
 80034bc:	200004a8 	.word	0x200004a8

080034c0 <_close_r>:
 80034c0:	b538      	push	{r3, r4, r5, lr}
 80034c2:	2300      	movs	r3, #0
 80034c4:	4d05      	ldr	r5, [pc, #20]	; (80034dc <_close_r+0x1c>)
 80034c6:	4604      	mov	r4, r0
 80034c8:	4608      	mov	r0, r1
 80034ca:	602b      	str	r3, [r5, #0]
 80034cc:	f7fd faf1 	bl	8000ab2 <_close>
 80034d0:	1c43      	adds	r3, r0, #1
 80034d2:	d102      	bne.n	80034da <_close_r+0x1a>
 80034d4:	682b      	ldr	r3, [r5, #0]
 80034d6:	b103      	cbz	r3, 80034da <_close_r+0x1a>
 80034d8:	6023      	str	r3, [r4, #0]
 80034da:	bd38      	pop	{r3, r4, r5, pc}
 80034dc:	200004a8 	.word	0x200004a8

080034e0 <_fstat_r>:
 80034e0:	b538      	push	{r3, r4, r5, lr}
 80034e2:	2300      	movs	r3, #0
 80034e4:	4d06      	ldr	r5, [pc, #24]	; (8003500 <_fstat_r+0x20>)
 80034e6:	4604      	mov	r4, r0
 80034e8:	4608      	mov	r0, r1
 80034ea:	4611      	mov	r1, r2
 80034ec:	602b      	str	r3, [r5, #0]
 80034ee:	f7fd faeb 	bl	8000ac8 <_fstat>
 80034f2:	1c43      	adds	r3, r0, #1
 80034f4:	d102      	bne.n	80034fc <_fstat_r+0x1c>
 80034f6:	682b      	ldr	r3, [r5, #0]
 80034f8:	b103      	cbz	r3, 80034fc <_fstat_r+0x1c>
 80034fa:	6023      	str	r3, [r4, #0]
 80034fc:	bd38      	pop	{r3, r4, r5, pc}
 80034fe:	bf00      	nop
 8003500:	200004a8 	.word	0x200004a8

08003504 <_isatty_r>:
 8003504:	b538      	push	{r3, r4, r5, lr}
 8003506:	2300      	movs	r3, #0
 8003508:	4d05      	ldr	r5, [pc, #20]	; (8003520 <_isatty_r+0x1c>)
 800350a:	4604      	mov	r4, r0
 800350c:	4608      	mov	r0, r1
 800350e:	602b      	str	r3, [r5, #0]
 8003510:	f7fd fae9 	bl	8000ae6 <_isatty>
 8003514:	1c43      	adds	r3, r0, #1
 8003516:	d102      	bne.n	800351e <_isatty_r+0x1a>
 8003518:	682b      	ldr	r3, [r5, #0]
 800351a:	b103      	cbz	r3, 800351e <_isatty_r+0x1a>
 800351c:	6023      	str	r3, [r4, #0]
 800351e:	bd38      	pop	{r3, r4, r5, pc}
 8003520:	200004a8 	.word	0x200004a8

08003524 <_lseek_r>:
 8003524:	b538      	push	{r3, r4, r5, lr}
 8003526:	4604      	mov	r4, r0
 8003528:	4608      	mov	r0, r1
 800352a:	4611      	mov	r1, r2
 800352c:	2200      	movs	r2, #0
 800352e:	4d05      	ldr	r5, [pc, #20]	; (8003544 <_lseek_r+0x20>)
 8003530:	602a      	str	r2, [r5, #0]
 8003532:	461a      	mov	r2, r3
 8003534:	f7fd fae1 	bl	8000afa <_lseek>
 8003538:	1c43      	adds	r3, r0, #1
 800353a:	d102      	bne.n	8003542 <_lseek_r+0x1e>
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	b103      	cbz	r3, 8003542 <_lseek_r+0x1e>
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	bd38      	pop	{r3, r4, r5, pc}
 8003544:	200004a8 	.word	0x200004a8

08003548 <_read_r>:
 8003548:	b538      	push	{r3, r4, r5, lr}
 800354a:	4604      	mov	r4, r0
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	2200      	movs	r2, #0
 8003552:	4d05      	ldr	r5, [pc, #20]	; (8003568 <_read_r+0x20>)
 8003554:	602a      	str	r2, [r5, #0]
 8003556:	461a      	mov	r2, r3
 8003558:	f7fd fa72 	bl	8000a40 <_read>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_read_r+0x1e>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	b103      	cbz	r3, 8003566 <_read_r+0x1e>
 8003564:	6023      	str	r3, [r4, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	200004a8 	.word	0x200004a8

0800356c <_init>:
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	bf00      	nop
 8003570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003572:	bc08      	pop	{r3}
 8003574:	469e      	mov	lr, r3
 8003576:	4770      	bx	lr

08003578 <_fini>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr
